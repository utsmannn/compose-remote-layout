{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Compose Remote Layout","text":"<p>Server-Driven UI Component for Compose Multiplatform</p> <p> </p>"},{"location":"#overview","title":"Overview","text":"<p>Compose Remote Layout empowers you to dynamically update your UI without app store submissions. Built for Compose Multiplatform, this library transforms JSON into native UI components, giving you the flexibility to modify interfaces on the fly.</p> <p>By enabling server-driven UI within the Compose ecosystem, you can:</p> <ul> <li>Update your app's look and feel instantly</li> <li>A/B test different layouts with different user segments</li> <li>Fix UI issues without emergency releases</li> <li>Deliver platform-specific experiences from a central source</li> </ul>"},{"location":"#why-use-compose-remote-layout","title":"Why Use Compose Remote Layout?","text":"<p>While solutions like React Native and Flutter offer dynamic UI updates, they require learning new frameworks or languages. Compose Remote Layout brings these capabilities to Compose developers:</p> <ul> <li>No New Languages to Learn - Stay within the Compose ecosystem</li> <li>Native Performance - Uses standard Compose components under the hood</li> <li>Multiplatform Support - Works with Compose Multiplatform for Android, iOS, Desktop, and Web</li> <li>Granular Control - Update specific screens or components, not the entire app</li> <li>Lightweight - Minimal impact on app size and performance</li> </ul>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#component-system","title":"Component System","text":"<p>The library provides built-in support for all essential Compose components:</p> <pre><code>// JSON definition\nval json = \"\"\"\n{\n  \"column\": {\n    \"children\": [\n      { \"text\": { \"content\": \"Hello World!\" } },\n      { \"button\": { \"content\": \"Click Me\", \"clickId\": \"my_button\" } }\n    ]\n  }\n}\n\"\"\"\n\n// Simple rendering\nDynamicLayout(component = createLayoutComponent(json))\n</code></pre> <ul> <li>Core Components - Column, Row, Box, Text, Button, Card, Spacer, and Grid</li> <li>Modifiers - Complete modifier support matching native Compose capabilities</li> <li>Nested Components - Create complex layouts with unlimited nesting</li> </ul>"},{"location":"#dynamic-updates","title":"Dynamic Updates","text":"<p>Load layouts from various sources to update your UI without redeployment:</p> <pre><code>// From Firebase Remote Config\nremoteConfig.fetchAndActivate().addOnCompleteListener { task -&gt;\n    if (task.isSuccessful) {\n        val layoutJson = remoteConfig.getString(\"home_screen\")\n        val component = createLayoutComponent(layoutJson)\n        DynamicLayout(component = component)\n    }\n}\n</code></pre> <ul> <li>Multiple Sources - API responses, Firebase Remote Config, local files, databases</li> <li>Fallback Support - Graceful degradation when remote sources are unavailable</li> <li>Caching - Store layouts for offline use and faster loading</li> </ul>"},{"location":"#value-binding","title":"Value Binding","text":"<p>Connect your layouts to dynamic data with the BindsValue system:</p> <pre><code>// Create and populate bindings\nval bindsValue = remember { BindsValue() }\nbindsValue.setValue(\"username\", user.displayName)\nbindsValue.setValue(\"itemCount\", cart.items.size.toString())\n\n// Reference in JSON with {key} syntax\nval json = \"\"\"\n{\n  \"text\": {\n    \"content\": \"Welcome, {username}! You have {itemCount} items in your cart.\"\n  }\n}\n\"\"\"\n</code></pre> <ul> <li>Real-time Updates - Values update automatically when underlying data changes</li> <li>Type Support - Bind to text content, colors, font sizes, and other properties</li> <li>Composable Integration - Works seamlessly with Compose state management</li> </ul>"},{"location":"#action-binding","title":"Action Binding","text":"<p>Create interactive UIs with click event handling:</p> <pre><code>DynamicLayout(\n    component = component,\n    onClickHandler = { clickId -&gt;\n        when (clickId) {\n            \"login_button\" -&gt; viewModel.login()\n            \"signup_button\" -&gt; navController.navigate(\"signup\")\n            \"settings\" -&gt; openSettings()\n        }\n    }\n)\n</code></pre> <ul> <li>Event Handling - Connect clicks to your application logic</li> <li>Parameterized Actions - Pass data through structured click IDs</li> <li>Architecture Integration - Works with ViewModel, MVI, and other patterns</li> </ul>"},{"location":"#custom-components","title":"Custom Components","text":"<p>Extend the library with your own components:</p> <pre><code>// Register a custom component\nCustomNodes.register(\"profile_card\") { param -&gt;\n    val name = param.data[\"name\"] ?: \"Unknown\"\n    val avatarUrl = param.data[\"avatar_url\"]\n\n    Card(modifier = param.modifier) {\n        // Your custom implementation\n    }\n}\n\n// Use in JSON\nval json = \"\"\"\n{\n  \"profile_card\": {\n    \"name\": \"John Doe\",\n    \"avatar_url\": \"https://example.com/avatar.jpg\"\n  }\n}\n\"\"\"\n</code></pre> <ul> <li>Custom UI Elements - Create reusable components that fit your app's needs</li> <li>Data Passing - Send arbitrary data to custom components</li> <li>Composition Support - Custom components can contain other components</li> </ul>"},{"location":"#cross-platform","title":"Cross-Platform","text":"<p>Develop once, deploy everywhere:</p> <ul> <li>Android - Native support through Jetpack Compose</li> <li>iOS - Support through Compose Multiplatform or standalone Swift package</li> <li>Desktop - Works with Compose for Desktop</li> <li>Web - Compatible with Compose for Web</li> </ul>"},{"location":"#use-cases","title":"Use Cases","text":""},{"location":"#ab-testing","title":"A/B Testing","text":"<p>Deploy multiple layout variations to different user segments:</p> <pre><code>val layoutKey = when {\n    user.isInTestGroup(\"new-home-ui\") -&gt; \"home_new\"\n    user.isInBetaProgram() -&gt; \"home_beta\"\n    else -&gt; \"home_standard\"\n}\n\nval layoutJson = remoteConfig.getString(layoutKey)\n</code></pre>"},{"location":"#dynamic-content","title":"Dynamic Content","text":"<p>Update UI for seasonal changes, promotions, or feature announcements without app updates:</p> <pre><code>val layoutJson = when {\n    isHolidaySeason() -&gt; remoteConfig.getString(\"home_holiday\")\n    isPromoActive() -&gt; remoteConfig.getString(\"home_promo\")\n    hasNewFeature() -&gt; remoteConfig.getString(\"home_new_feature\")\n    else -&gt; remoteConfig.getString(\"home_default\")\n}\n</code></pre>"},{"location":"#platform-customization","title":"Platform Customization","text":"<p>Deliver optimized experiences for different devices:</p> <pre><code>val layoutKey = when {\n    isTablet() -&gt; \"product_detail_tablet\"\n    isLandscape() -&gt; \"product_detail_landscape\"\n    else -&gt; \"product_detail_phone\"\n}\n</code></pre>"},{"location":"#rapid-iterations","title":"Rapid Iterations","text":"<p>Quickly fix UI issues or test new designs without app store submissions:</p> <pre><code>// Fetch the latest layout version\nval layoutJson = api.fetchLayout(\"checkout_screen\", buildConfig.VERSION_CODE)\n\n// Apply with fallback for errors\ntry {\n    val component = createLayoutComponent(layoutJson)\n    DynamicLayout(component = component)\n} catch (e: Exception) {\n    // Fall back to bundled layout\n    val bundledJson = loadJsonFromAssets(\"checkout_fallback.json\")\n    val fallbackComponent = createLayoutComponent(bundledJson)\n    DynamicLayout(component = fallbackComponent)\n}\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Get started with Compose Remote Layout:</p> <ul> <li>Installation - Add the library to your project</li> <li>Basic Setup - Create your first dynamic layout</li> </ul>"},{"location":"#setup","title":"Setup","text":"<p>Learn more about the library's core features:</p> <ul> <li>Remote Sources - Integrate with APIs and config   services</li> <li>JSON Structure - Learn the layout format</li> <li>Bind Values - Create dynamic content</li> <li>Bind Actions - Handle user interactions</li> </ul>"},{"location":"#sample-projects","title":"Sample Projects","text":"<p>Explore complete examples in the repository:</p> <p>-     * Firebase Integration ** - Complete implementation with Firebase Remote Config -     * Custom Components ** - Examples of extending the library -     * *Form Builder ** - Dynamic form creation and validation</p>"},{"location":"#json-builder-tool","title":"JSON Builder Tool","text":"<p>The repository includes a web-based JSON builder tool for creating and testing layouts:</p> <p></p> <p>To use the JSON builder:</p> <pre><code>./gradlew :jsonBuilderWeb:jsBrowserRun\n</code></pre>"},{"location":"#current-status","title":"Current Status","text":"<p>\u26a0\ufe0f Early Development Stage</p> <p>Compose Remote Layout is currently in alpha stage. While functional for many use cases, please note:</p> <ul> <li>API may change between versions</li> <li>Test thoroughly before production use</li> <li>Not all Compose features are supported yet</li> <li>Performance optimizations are ongoing</li> </ul> <p>We recommend:</p> <ul> <li>Using this library for experimental projects</li> <li>Contributing feedback and bug reports</li> <li>Waiting for stable releases before critical production use</li> </ul>"},{"location":"#get-involved","title":"Get Involved","text":"<ul> <li>GitHub Repository</li> <li>Report Issues</li> <li>Medium Article</li> </ul>"},{"location":"01-getting-started/01-installation/","title":"Installation","text":"<p>Compose Remote Layout is available on Maven Central. This guide will help you add it to your project.</p>"},{"location":"01-getting-started/01-installation/#adding-dependencies","title":"Adding Dependencies","text":"<p>Add the dependencies to your project's <code>build.gradle.kts</code> file according to your platform needs.</p>"},{"location":"01-getting-started/01-installation/#for-kotlin-multiplatform-projects","title":"For Kotlin Multiplatform Projects","text":"<pre><code>// Core dependency - required for all projects\nimplementation(\"io.github.utsmannn:compose-remote-layout:$version\")\n\n// Choose platform-specific implementations as needed:\n// For Android apps\nimplementation(\"io.github.utsmannn:compose-remote-layout-android:$version\")\n\n// For JVM desktop apps\nimplementation(\"io.github.utsmannn:compose-remote-layout-jvm:$version\")\n\n// For iOS projects through KMP\nimplementation(\"io.github.utsmannn:compose-remote-layout-iosx64:$version\") // iOS Simulator x64\nimplementation(\"io.github.utsmannn:compose-remote-layout-iosarm64:$version\") // iOS devices\n\n// For JavaScript/Web applications\nimplementation(\"io.github.utsmannn:compose-remote-layout-js:$version\")\n\n// For navigation support\nimplementation(\"io.github.utsmannn:compose-remote-layout-router:$version\")\n</code></pre> <p>Replace <code>$version</code> with the latest version. You can check:</p>"},{"location":"01-getting-started/01-installation/#-the-maven-central-badge-on-the-home-page","title":"- The Maven Central badge on the home page","text":"<p>The Maven Central Repository page for the most current version - The GitHub releases page for release notes</p>"},{"location":"01-getting-started/01-installation/#for-swift-projects-without-kotlin-multiplatform","title":"For Swift Projects (without Kotlin Multiplatform)","text":"<p>If you're developing a native iOS application without using Kotlin Multiplatform, you can integrate Compose Remote Layout through Swift Package Manager:</p> <pre><code>dependencies: [\n    .package(url: \"https://github.com/utsmannn/compose-remote-layout-swift.git\", .upToNextMajor(from: \"0.0.1-alpha05\"))\n]\n</code></pre>"},{"location":"01-getting-started/01-installation/#adding-via-xcode-ui","title":"Adding via Xcode UI:","text":"<ol> <li>Open your project in Xcode</li> <li>Go to File &gt; Swift Packages &gt; Add Package Dependency</li> <li>Enter the package URL: <code>https://github.com/utsmannn/compose-remote-layout-swift.git</code></li> <li>Select the version you want to use</li> <li>Click Finish</li> <li>Import the package with <code>import ComposeRemoteLayoutSwift</code> in your Swift files</li> </ol>"},{"location":"01-getting-started/01-installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify the installation is correct, you can create a simple test component:</p> <pre><code>import com.utsman.composeremote.DynamicLayout\nimport com.utsman.composeremote.createLayoutComponent\n\n// In your Composable function\nval component = createLayoutComponent(\"\"\"{\"text\": {\"content\": \"Hello World!\"}}\"\"\")\nDynamicLayout(component = component)\n</code></pre> <p>If this renders a simple \"Hello World!\" text, your installation is successful.</p>"},{"location":"01-getting-started/01-installation/#next-steps","title":"Next Steps","text":"<p>Now that you've set up Compose Remote Layout in your project, continue to Basic Setup to learn how to create your first dynamic layout.</p>"},{"location":"01-getting-started/02-basic-setup/","title":"Basic Usage","text":"<p>This guide introduces the fundamentals of using Compose Remote Layout in your application. The library works by converting JSON strings into dynamic UI components.</p>"},{"location":"01-getting-started/02-basic-setup/#core-concept","title":"Core Concept","text":"<p>At its heart, Compose Remote Layout takes a JSON string that defines your UI layout, converts it into Compose components, and renders them. This JSON string can come from anywhere:</p> <ul> <li>Hardcoded in your app (for testing or fallback layouts)</li> <li>Loaded from local assets</li> <li>Retrieved from a remote API</li> <li>Fetched from a configuration service like Firebase Remote Config</li> <li>Generated dynamically based on user preferences</li> </ul>"},{"location":"01-getting-started/02-basic-setup/#creating-your-first-dynamic-layout","title":"Creating Your First Dynamic Layout","text":"<p>Let's start with a basic layout that displays a text element:</p> <pre><code>import androidx.compose.runtime.Composable\nimport androidx.compose.runtime.remember\nimport com.utsman.composeremote.DynamicLayout\nimport com.utsman.composeremote.createLayoutComponent\n\n@Composable\nfun SimpleLayout() {\n    // Step 1: Define your layout as a JSON string\n    // This JSON describes a column with a text element inside\n    val jsonLayout = \"\"\"\n    {\n      \"column\": {                       // Root component is a Column\n        \"modifier\": {                   // Apply modifiers to the Column\n          \"base\": {\n            \"fillMaxWidth\": true,       // Make it fill the available width\n            \"padding\": {\n              \"all\": 16                 // Add 16dp padding on all sides\n            }\n          }\n        },\n        \"children\": [                   // Child components of the Column\n          {\n            \"text\": {                   // A Text component\n              \"content\": \"Hello from Remote Layout!\",  // The text to display\n              \"fontSize\": 20,           // 20sp font size\n              \"fontWeight\": \"bold\",     // Bold font weight\n              \"color\": \"#0066CC\"        // Text color in hex format\n            }\n          }\n        ]\n      }\n    }\n    \"\"\"\n\n    // Step 2: Convert the JSON string to a LayoutComponent object\n    val component = createLayoutComponent(jsonLayout)\n\n    // Step 3: Render the component using DynamicLayout\n    DynamicLayout(\n        component = component,\n        onClickHandler = { clickId -&gt;\n            // We'll handle clicks in a later section\n        }\n    )\n}\n</code></pre>"},{"location":"01-getting-started/02-basic-setup/#understanding-the-flow","title":"Understanding the Flow","text":"<ol> <li> <p>JSON Definition: You define your UI structure in JSON format. This could be stored anywhere.</p> </li> <li> <p>Parsing: The <code>createLayoutComponent()</code> function parses the JSON string and converts it to a    structured <code>LayoutComponent</code> object that Compose can understand.</p> </li> <li> <p>Rendering: The <code>DynamicLayout</code> composable takes the parsed component and renders it using    native Compose components.</p> </li> </ol>"},{"location":"01-getting-started/02-basic-setup/#default-components","title":"Default Components","text":"<p>Compose Remote Layout supports these built-in components:</p> <ul> <li><code>column</code>: Vertical arrangement of children (equivalent to <code>Column</code> in Compose)</li> <li><code>row</code>: Horizontal arrangement of children (equivalent to <code>Row</code> in Compose)</li> <li><code>box</code>: Overlay arrangement of children (equivalent to <code>Box</code> in Compose)</li> <li><code>grid</code>: Grid arrangement of children</li> <li><code>text</code>: Text display</li> <li><code>button</code>: Clickable button</li> <li><code>card</code>: Material card component</li> <li><code>spacer</code>: Empty space</li> </ul>"},{"location":"01-getting-started/02-basic-setup/#using-null-or-invalid-json","title":"Using null or invalid JSON","text":"<p>If you provide null or invalid JSON, the library will use a default component:</p> <pre><code>// This will render a default component\nDynamicLayout(component = null)\n\n// This will also render a default component if the parsing fails\nval invalidJsonComponent = createLayoutComponent(\"not a valid json\")\nDynamicLayout(component = invalidJsonComponent)\n</code></pre> <p>The default component is a simple Column with a Button and a Text element.</p>"},{"location":"01-getting-started/02-basic-setup/#next-steps","title":"Next Steps","text":"<p>Now that you understand the basic setup, you can:</p> <ol> <li>Learn about integration with remote sources to    fetch layouts dynamically</li> <li>Explore the JSON structure in detail</li> <li>Add dynamic content with bind values</li> <li>Make your UI interactive with click actions</li> </ol>"},{"location":"02-setup/03-integrated-remote-sources/","title":"Integrate with Remote Source","text":"<p>One of the key advantages of Compose Remote Layout is its ability to load UI definitions from multiple sources. This guide explores different methods for integrating remote layouts into your application.</p>"},{"location":"02-setup/03-integrated-remote-sources/#the-power-of-remote-layouts","title":"The Power of Remote Layouts","text":"<p>The ability to update your UI without deploying a new app version offers significant benefits:</p> <ul> <li>Rapid UI iterations: Make UI changes instantly without app store review delays</li> <li>A/B testing: Test different layouts with different user segments</li> <li>Seasonal UI: Deploy special holiday or promotional interfaces on demand</li> <li>Fix UI bugs: Address layout issues without emergency releases</li> <li>Feature flagging: Gradually roll out new UI elements to select users</li> <li>Device-specific layouts: Deliver optimized experiences for different device types</li> </ul>"},{"location":"02-setup/03-integrated-remote-sources/#source-flexibility","title":"Source Flexibility","text":"<p>Compose Remote Layout is designed to be source-agnostic. The library only requires a JSON string - how you obtain that string is entirely up to you. Here are the most common integration approaches:</p>"},{"location":"02-setup/03-integrated-remote-sources/#1-api-integration","title":"1. API Integration","text":"<p>Fetch layouts from your backend API to deliver dynamic experiences:</p> <pre><code>@Composable\nfun APILayout(\n    layoutId: String = \"home_screen\",\n    apiClient: LayoutApiClient,\n    viewModel: ScreenViewModel\n) {\n    var layoutJson by remember { mutableStateOf(\"\") }\n    var isLoading by remember { mutableStateOf(true) }\n\n    // Fetch layout when the composable is first displayed\n    LaunchedEffect(layoutId) {\n        try {\n            // Get layout JSON from API\n            layoutJson = apiClient.fetchLayout(layoutId)\n            isLoading = false\n        } catch (e: Exception) {\n            // If fetch fails, use a fallback layout\n            layoutJson = \"\"\"\n            {\n              \"column\": {\n                \"children\": [\n                  {\n                    \"text\": {\n                      \"content\": \"Could not load layout. Please check your connection.\",\n                      \"textAlign\": \"center\"\n                    }\n                  }\n                ]\n              }\n            }\n            \"\"\"\n            isLoading = false\n        }\n    }\n\n    // Loading state\n    if (isLoading) {\n        Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n            CircularProgressIndicator()\n        }\n    } else {\n        // Create component from JSON and render\n        val component = createLayoutComponent(layoutJson)\n\n        // Define bind values if needed\n        val bindsValue = remember { BindsValue() }\n\n        // Get data from viewModel and bind to layout\n        val user by viewModel.currentUser.collectAsState()\n\n        LaunchedEffect(user) {\n            bindsValue.setValue(\"username\", user.displayName)\n            bindsValue.setValue(\"userLevel\", user.level.toString())\n        }\n\n        // Render the dynamic layout\n        DynamicLayout(\n            component = component,\n            bindValue = bindsValue,\n            onClickHandler = { clickId -&gt;\n                viewModel.handleClick(clickId)\n            }\n        )\n    }\n}\n</code></pre>"},{"location":"02-setup/03-integrated-remote-sources/#2-firebase-remote-config","title":"2. Firebase Remote Config","text":"<p>Firebase Remote Config is perfect for A/B testing and gradual rollouts:</p> <pre><code>@Composable\nfun FirebaseRemoteLayout(\n    configKey: String = \"home_layout\",\n    remoteConfig: FirebaseRemoteConfig\n) {\n    var layoutJson by remember { mutableStateOf(\"\") }\n    var isLoading by remember { mutableStateOf(true) }\n\n    LaunchedEffect(configKey) {\n        // Set minimum fetch interval\n        val configSettings = FirebaseRemoteConfigSettings.Builder()\n            .setMinimumFetchIntervalInSeconds(3600) // 1 hour for production\n            .build()\n        remoteConfig.setConfigSettingsAsync(configSettings)\n\n        // Set default values\n        val defaults = hashMapOf&lt;String, Any&gt;()\n        defaults[configKey] = DEFAULT_LAYOUT_JSON\n        remoteConfig.setDefaultsAsync(defaults)\n\n        try {\n            // Fetch config and activate it\n            remoteConfig.fetchAndActivate().addOnCompleteListener { task -&gt;\n                if (task.isSuccessful) {\n                    // Get the layout JSON from Remote Config\n                    layoutJson = remoteConfig.getString(configKey)\n                } else {\n                    // Use default if fetch fails\n                    layoutJson = DEFAULT_LAYOUT_JSON\n                }\n                isLoading = false\n            }\n        } catch (e: Exception) {\n            // Handle errors\n            layoutJson = DEFAULT_LAYOUT_JSON\n            isLoading = false\n        }\n    }\n\n    if (isLoading) {\n        // Show loading indicator\n        Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n            CircularProgressIndicator()\n        }\n    } else {\n        // Create and render the component\n        val component = createLayoutComponent(layoutJson)\n        DynamicLayout(component = component)\n    }\n}\n\n// Default layout as fallback\nprivate const val DEFAULT_LAYOUT_JSON = \"\"\"\n{\n  \"column\": {\n    \"modifier\": {\n      \"base\": {\n        \"fillMaxWidth\": true,\n        \"padding\": {\n          \"all\": 16\n        }\n      }\n    },\n    \"children\": [\n      {\n        \"text\": {\n          \"content\": \"Welcome to our app!\",\n          \"fontSize\": 24,\n          \"fontWeight\": \"bold\"\n        }\n      }\n    ]\n  }\n}\n\"\"\"\n</code></pre>"},{"location":"02-setup/03-integrated-remote-sources/#3-local-assets","title":"3. Local Assets","text":"<p>For bundling predefined layouts with your app:</p> <pre><code>@Composable\nfun AssetBasedLayout(\n    assetPath: String = \"layouts/home_screen.json\",\n    context: Context = LocalContext.current\n) {\n    // Load layout from assets\n    val layoutJson = remember(assetPath) {\n        try {\n            context.assets.open(assetPath)\n                .bufferedReader()\n                .use { it.readText() }\n        } catch (e: Exception) {\n            // Fallback if asset can't be loaded\n            \"\"\"{\"text\": {\"content\": \"Could not load layout from assets\"}}\"\"\"\n        }\n    }\n\n    val component = createLayoutComponent(layoutJson)\n    DynamicLayout(component = component)\n}\n</code></pre>"},{"location":"02-setup/03-integrated-remote-sources/#4-database-storage","title":"4. Database Storage","text":"<p>For persisting and retrieving layouts from local storage:</p> <pre><code>@Composable\nfun DatabaseLayout(\n    layoutKey: String = \"home_screen\",\n    layoutRepository: LayoutRepository\n) {\n    // Retrieve layout from the repository\n    val layoutResult by produceState&lt;Result&lt;String&gt;&gt;(\n        initialValue = Result.Loading,\n        key1 = layoutKey\n    ) {\n        value = layoutRepository.getLayout(layoutKey)\n    }\n\n    when (layoutResult) {\n        is Result.Loading -&gt; {\n            // Show loading state\n            Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n                CircularProgressIndicator()\n            }\n        }\n        is Result.Success -&gt; {\n            // Create and render component\n            val layoutJson = (layoutResult as Result.Success&lt;String&gt;).data\n            val component = createLayoutComponent(layoutJson)\n            DynamicLayout(component = component)\n        }\n        is Result.Error -&gt; {\n            // Show error state\n            val fallbackLayout = \"\"\"\n            {\n              \"column\": {\n                \"modifier\": {\n                  \"base\": {\n                    \"fillMaxWidth\": true,\n                    \"padding\": {\n                      \"all\": 16\n                    }\n                  },\n                  \"verticalArrangement\": \"center\",\n                  \"horizontalAlignment\": \"center\"\n                },\n                \"children\": [\n                  {\n                    \"text\": {\n                      \"content\": \"Could not load layout from database\",\n                      \"textAlign\": \"center\"\n                    }\n                  }\n                ]\n              }\n            }\n            \"\"\"\n            val component = createLayoutComponent(fallbackLayout)\n            DynamicLayout(component = component)\n        }\n    }\n}\n\n// Example repository implementation\nclass LayoutRepository(\n    private val layoutDao: LayoutDao,\n    private val apiClient: LayoutApiClient\n) {\n    suspend fun getLayout(layoutKey: String): Result&lt;String&gt; {\n        // Try to get from local database first\n        val localLayout = layoutDao.getLayoutByKey(layoutKey)\n\n        return if (localLayout != null) {\n            // Return cached layout\n            Result.Success(localLayout.jsonContent)\n        } else {\n            try {\n                // Fetch from API if not in database\n                val remoteLayout = apiClient.fetchLayout(layoutKey)\n\n                // Cache the fetched layout\n                layoutDao.insertLayout(LayoutEntity(layoutKey, remoteLayout))\n\n                Result.Success(remoteLayout)\n            } catch (e: Exception) {\n                Result.Error(e)\n            }\n        }\n    }\n}\n\n// Result wrapper class\nsealed class Result&lt;out T&gt; {\n    object Loading : Result&lt;Nothing&gt;()\n    data class Success&lt;T&gt;(val data: T) : Result&lt;T&gt;()\n    data class Error(val exception: Exception) : Result&lt;Nothing&gt;()\n}\n</code></pre>"},{"location":"02-setup/03-integrated-remote-sources/#advanced-implementation-patterns","title":"Advanced Implementation Patterns","text":""},{"location":"02-setup/03-integrated-remote-sources/#layout-versioning","title":"Layout Versioning","text":"<p>Include version information to handle compatibility:</p> <pre><code>// Define your layout response structure\ndata class LayoutResponse(\n    val version: String,\n    val minAppVersion: String,\n    val layout: String\n)\n\n// Check compatibility before rendering\n@Composable\nfun VersionedLayout(layoutResponse: LayoutResponse) {\n    val appVersion = BuildConfig.VERSION_NAME\n\n    if (isVersionCompatible(appVersion, layoutResponse.minAppVersion)) {\n        // Version is compatible, render the layout\n        val component = createLayoutComponent(layoutResponse.layout)\n        DynamicLayout(component = component)\n    } else {\n        // Version incompatible, show update message\n        UpdateRequiredScreen()\n    }\n}\n\n// Version comparison utility\nfun isVersionCompatible(appVersion: String, minRequiredVersion: String): Boolean {\n    // Implement semantic version comparison logic\n    // Return true if appVersion &gt;= minRequiredVersion\n    return true // Simplified for this example\n}\n</code></pre>"},{"location":"02-setup/03-integrated-remote-sources/#caching-strategy","title":"Caching Strategy","text":"<p>Implement a smart caching strategy for better performance and offline support:</p> <pre><code>class LayoutCache(private val context: Context) {\n    private val preferences = context.getSharedPreferences(\n        \"layout_cache\", Context.MODE_PRIVATE\n    )\n\n    fun saveLayout(key: String, json: String, timestamp: Long = System.currentTimeMillis()) {\n        preferences.edit()\n            .putString(\"${key}_json\", json)\n            .putLong(\"${key}_timestamp\", timestamp)\n            .apply()\n    }\n\n    fun getLayout(key: String): CachedLayout? {\n        val json = preferences.getString(\"${key}_json\", null) ?: return null\n        val timestamp = preferences.getLong(\"${key}_timestamp\", 0)\n        return CachedLayout(json, timestamp)\n    }\n\n    fun isExpired(key: String, maxAgeMs: Long): Boolean {\n        val timestamp = preferences.getLong(\"${key}_timestamp\", 0)\n        return System.currentTimeMillis() - timestamp &gt; maxAgeMs\n    }\n}\n\ndata class CachedLayout(val json: String, val timestamp: Long)\n\n// Usage in a Composable\n@Composable\nfun CachedRemoteLayout(\n    layoutKey: String,\n    apiClient: LayoutApiClient,\n    layoutCache: LayoutCache,\n    maxAgeMs: Long = 24 * 60 * 60 * 1000 // 24 hours\n) {\n    var layoutJson by remember { mutableStateOf(\"\") }\n    var isLoading by remember { mutableStateOf(true) }\n\n    LaunchedEffect(layoutKey) {\n        // Try to get from cache first\n        val cachedLayout = layoutCache.getLayout(layoutKey)\n\n        if (cachedLayout != null &amp;&amp; !layoutCache.isExpired(layoutKey, maxAgeMs)) {\n            // Use cached layout if not expired\n            layoutJson = cachedLayout.json\n            isLoading = false\n\n            // Fetch updated layout in background\n            launch {\n                try {\n                    val freshLayout = apiClient.fetchLayout(layoutKey)\n                    if (freshLayout != cachedLayout.json) {\n                        // Update cache and UI if there's a new layout\n                        layoutCache.saveLayout(layoutKey, freshLayout)\n                        layoutJson = freshLayout\n                    }\n                } catch (e: Exception) {\n                    // Continue using cached layout on error\n                }\n            }\n        } else {\n            // No valid cache, must fetch from network\n            try {\n                val freshLayout = apiClient.fetchLayout(layoutKey)\n                layoutCache.saveLayout(layoutKey, freshLayout)\n                layoutJson = freshLayout\n                isLoading = false\n            } catch (e: Exception) {\n                // Try to use expired cache as last resort\n                if (cachedLayout != null) {\n                    layoutJson = cachedLayout.json\n                } else {\n                    layoutJson = \"\"\"{\"text\": {\"content\": \"Could not load layout\"}}\"\"\"\n                }\n                isLoading = false\n            }\n        }\n    }\n\n    if (isLoading) {\n        // Show loading state\n        Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {\n            CircularProgressIndicator()\n        }\n    } else {\n        // Create and render component\n        val component = createLayoutComponent(layoutJson)\n        DynamicLayout(component = component)\n    }\n}\n</code></pre>"},{"location":"02-setup/03-integrated-remote-sources/#implementation-tips","title":"Implementation Tips","text":""},{"location":"02-setup/03-integrated-remote-sources/#1-design-for-network-failures","title":"1. Design for Network Failures","text":"<p>Always assume network requests can fail:</p> <pre><code>try {\n    // Attempt to fetch layout\n    layoutJson = apiClient.fetchLayout(layoutKey)\n} catch (NetworkException e) {\n    // Use progressively more basic fallbacks\n    layoutJson = try {\n        layoutCache.getLayout(layoutKey)?.json\n    } catch (CacheException ce) {\n        try {\n            context.assets.open(\"fallbacks/$layoutKey.json\").bufferedReader().use { it.readText() }\n        } catch (AssetException ae) {\n            \"\"\"{\"text\": {\"content\": \"Unable to load content. Please try again.\"}}\"\"\"\n        }\n    }\n}\n</code></pre>"},{"location":"02-setup/03-integrated-remote-sources/#2-implement-analytics-for-layout-performance","title":"2. Implement Analytics for Layout Performance","text":"<p>Track layout loading and rendering performance:</p> <pre><code>val startTime = System.currentTimeMillis()\n\n// Parse layout\nval component = createLayoutComponent(layoutJson)\nval parseTime = System.currentTimeMillis() - startTime\n\n// Log metrics\nanalytics.trackEvent(\"layout_loaded\") {\n    param(\"layout_key\", layoutKey)\n    param(\"layout_size_bytes\", layoutJson.length)\n    param(\"parse_time_ms\", parseTime)\n}\n\n// Set up a LayoutInfo receiver to track render times\nval renderInfo = remember { LayoutRenderInfo() }\n\nDynamicLayout(\n    component = component,\n    onRenderComplete = { renderTime -&gt;\n        analytics.trackEvent(\"layout_rendered\") {\n            param(\"layout_key\", layoutKey)\n            param(\"render_time_ms\", renderTime)\n        }\n    }\n)\n</code></pre>"},{"location":"02-setup/03-integrated-remote-sources/#3-use-feature-flags-with-remote-layouts","title":"3. Use Feature Flags with Remote Layouts","text":"<p>Combine feature flags with your layouts for controlled rollouts:</p> <pre><code>// Get feature flags\nval featureFlags = featureFlagsService.getFlags()\n\n// Select appropriate layout based on flags\nval layoutKey = when {\n    featureFlags.isEnabled(\"new_home_ui\") -&gt; \"home_new\"\n    featureFlags.isInBetaGroup() -&gt; \"home_beta\"\n    else -&gt; \"home_standard\"\n}\n\n// Fetch and render the selected layout\nval layoutJson = apiClient.fetchLayout(layoutKey)\nval component = createLayoutComponent(layoutJson)\nDynamicLayout(component = component)\n</code></pre>"},{"location":"02-setup/03-integrated-remote-sources/#next-steps","title":"Next Steps","text":"<p>Now that you understand how to integrate remote layouts, you can:</p> <ol> <li>Learn about binding values to add dynamic content</li> <li>Implement action handling for user interactions</li> <li>Check out the sample apps in the repository for complete implementations</li> </ol>"},{"location":"02-setup/04-bind-values/","title":"Bind Values","text":"<p>The Bind Value system is a powerful feature of Compose Remote Layout that enables dynamic content updates without changing your JSON layout definition. This guide explains how to use bind values to create reactive UIs.</p>"},{"location":"02-setup/04-bind-values/#understanding-bind-values","title":"Understanding Bind Values","text":"<p>Bind Values allow you to:</p> <ol> <li>Update text and properties dynamically - Change content based on state, user input, or data</li> <li>Create reactive interfaces - Reflect changes immediately when underlying data changes</li> <li>Personalize experiences - Show user-specific content without different layout files</li> <li>Connect remote layouts to local data - Bridge your JSON layouts with app data</li> </ol>"},{"location":"02-setup/04-bind-values/#how-bind-values-work","title":"How Bind Values Work","text":"<ol> <li>You create a <code>BindsValue</code> instance in your Kotlin code</li> <li>You set key-value pairs in this instance using <code>setValue()</code></li> <li>In your JSON layout, you reference these keys using the <code>{key}</code> syntax</li> <li>When the layout renders, <code>{key}</code> is replaced with the current value</li> </ol>"},{"location":"02-setup/04-bind-values/#basic-usage","title":"Basic Usage","text":""},{"location":"02-setup/04-bind-values/#step-1-create-a-bindsvalue-instance","title":"Step 1: Create a BindsValue Instance","text":"<pre><code>import androidx.compose.runtime.Composable\nimport androidx.compose.runtime.remember\nimport com.utsman.composeremote.BindsValue\nimport com.utsman.composeremote.DynamicLayout\nimport com.utsman.composeremote.createLayoutComponent\n\n@Composable\nfun DynamicWelcomeScreen(username: String) {\n    // Create a BindsValue instance\n    val bindsValue = remember { BindsValue() }\n\n    // Set values to be used in the layout\n    bindsValue.setValue(\"username\", username)\n    bindsValue.setValue(\"appName\", \"My Awesome App\")\n\n    val layoutJson = \"\"\"\n    {\n      \"column\": {\n        \"modifier\": {\n          \"base\": {\n            \"fillMaxWidth\": true,\n            \"padding\": {\n              \"all\": 16\n            }\n          }\n        },\n        \"children\": [\n          {\n            \"text\": {\n              \"content\": \"Welcome to {appName}!\",\n              \"fontSize\": 24,\n              \"fontWeight\": \"bold\"\n            }\n          },\n          {\n            \"text\": {\n              \"content\": \"Hello, {username}\",\n              \"fontSize\": 18\n            }\n          }\n        ]\n      }\n    }\n    \"\"\"\n\n    // Pass the BindsValue to DynamicLayout\n    val component = createLayoutComponent(layoutJson)\n    DynamicLayout(\n        component = component,\n        bindValue = bindsValue\n    )\n}\n</code></pre>"},{"location":"02-setup/04-bind-values/#step-2-reference-values-in-your-json","title":"Step 2: Reference Values in Your JSON","text":"<p>Use the <code>{key}</code> syntax to reference bound values in your JSON:</p> <pre><code>{\n  \"text\": {\n    \"content\": \"Welcome back, {username}!\",\n    \"color\": \"{primaryColor}\"\n  }\n}\n</code></pre>"},{"location":"02-setup/04-bind-values/#step-3-update-values-dynamically","title":"Step 3: Update Values Dynamically","text":"<p>Values can be updated at any time, and the UI will reflect the changes:</p> <pre><code>@Composable\nfun CounterExample() {\n    // State for the counter\n    var counter by remember { mutableStateOf(0) }\n\n    // Create and remember a BindsValue instance\n    val bindsValue = remember { BindsValue() }\n\n    // Update bindsValue whenever counter changes\n    LaunchedEffect(counter) {\n        bindsValue.setValue(\"count\", counter.toString())\n\n        // You can also set computed values\n        val textColor = when {\n            counter &gt; 10 -&gt; \"#00AA00\"  // Green for high values\n            counter &lt; 0 -&gt; \"#AA0000\"   // Red for negative values\n            else -&gt; \"#000000\"          // Black for normal values\n        }\n        bindsValue.setValue(\"countColor\", textColor)\n    }\n\n    Column {\n        // Display the counter using DynamicLayout\n        DynamicLayout(\n            component = createLayoutComponent(\n                \"\"\"\n                {\n                  \"text\": {\n                    \"content\": \"Count: {count}\",\n                    \"fontSize\": 24,\n                    \"color\": \"{countColor}\"\n                  }\n                }\n            \"\"\"\n            ),\n            bindValue = bindsValue\n        )\n\n        // Regular Compose UI for buttons\n        Row(\n            modifier = Modifier.fillMaxWidth(),\n            horizontalArrangement = Arrangement.SpaceEvenly\n        ) {\n            Button(onClick = { counter-- }) {\n                Text(\"-\")\n            }\n            Button(onClick = { counter++ }) {\n                Text(\"+\")\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"02-setup/04-bind-values/#advanced-usage","title":"Advanced Usage","text":""},{"location":"02-setup/04-bind-values/#binding-to-different-property-types","title":"Binding to Different Property Types","text":"<p>You can bind values to various component properties, not just text content:</p> <pre><code>// Set different types of values\nbindsValue.setValue(\"isVisible\", true)\nbindsValue.setValue(\"buttonColor\", \"#0066CC\")\nbindsValue.setValue(\"fontSize\", 16)\n\n// JSON with bindings to different properties\nval json = \"\"\"\n{\n  \"column\": {\n    \"children\": [\n      {\n        \"text\": {\n          \"content\": \"This text has {fontSize}sp font size\",\n          \"fontSize\": {fontSize},\n          \"color\": \"{textColor}\"\n        }\n      },\n      {\n        \"button\": {\n          \"content\": \"Click Me\",\n          \"fontColor\": \"{buttonColor}\"\n        }\n      }\n    ]\n  }\n}\n\"\"\"\n</code></pre>"},{"location":"02-setup/04-bind-values/#binding-with-custom-components","title":"Binding with Custom Components","text":"<p>Bind values work with custom components through the <code>data</code> property:</p> <pre><code>// Register a custom chart component\nCustomNodes.register(\"analytics_chart\") { param -&gt;\n    val chartData = param.data[\"dataset\"] ?: \"[]\"\n    val showLegend = param.data[\"showLegend\"]?.toBoolean() ?: true\n\n    // Parse the data and render chart\n    val dataset = parseChartData(chartData)\n\n    Chart(\n        dataset = dataset,\n        showLegend = showLegend,\n        modifier = param.modifier\n    )\n}\n\n// In your composable\nval bindsValue = remember { BindsValue() }\n\n// Update chart data\nbindsValue.setValue(\"chartData\", \"[10, 24, 15, 32, 18, 27]\")\nbindsValue.setValue(\"showLegendOption\", \"true\")\n\n// JSON with custom component\nval json = \"\"\"\n{\n  \"analytics_chart\": {\n    \"dataset\": \"{chartData}\",\n    \"showLegend\": \"{showLegendOption}\"\n  }\n}\n\"\"\"\n\nDynamicLayout(\n    component = createLayoutComponent(json),\n    bindValue = bindsValue\n)\n</code></pre>"},{"location":"02-setup/04-bind-values/#combining-multiple-bindsvalue-instances","title":"Combining Multiple BindsValue Instances","text":"<p>You can combine different BindsValue instances using the <code>+</code> operator:</p> <pre><code>@Composable\nfun ProfileScreen(user: User, theme: AppTheme) {\n    // Create separate BindsValue instances for different concerns\n    val userBinds = remember { BindsValue() }\n    val themeBinds = remember { BindsValue() }\n\n    // Update user-related values\n    LaunchedEffect(user) {\n        userBinds.setValue(\"username\", user.displayName)\n        userBinds.setValue(\"email\", user.email)\n        userBinds.setValue(\"memberSince\", user.joinDate.format(\"MMM yyyy\"))\n    }\n\n    // Update theme-related values\n    LaunchedEffect(theme) {\n        themeBinds.setValue(\"primaryColor\", theme.primaryColor)\n        themeBinds.setValue(\"textColor\", theme.textColor)\n        themeBinds.setValue(\"backgroundColor\", theme.backgroundColor)\n    }\n\n    // Combine the BindsValue instances\n    val combinedBinds = userBinds + themeBinds\n\n    // Use the combined binds with the layout\n    DynamicLayout(\n        component = createLayoutComponent(profileLayoutJson),\n        bindValue = combinedBinds\n    )\n}\n</code></pre>"},{"location":"02-setup/04-bind-values/#using-compositionlocal-for-hierarchical-binding","title":"Using CompositionLocal for Hierarchical Binding","text":"<p>The library provides a <code>LocalBindsValue</code> CompositionLocal for accessing bind values throughout the composition hierarchy:</p> <pre><code>@Composable\nfun AppScreen() {\n    // Create a top-level BindsValue\n    val appBinds = remember { BindsValue() }\n    appBinds.setValue(\"appName\", \"My App\")\n    appBinds.setValue(\"version\", \"1.2.3\")\n\n    // Provide it to the composition hierarchy\n    CompositionLocalProvider(LocalBindsValue provides appBinds) {\n        // Child composables can now access appBinds\n        HomeScreen()\n    }\n}\n\n@Composable\nfun HomeScreen() {\n    // Create a screen-level BindsValue\n    val screenBinds = remember { BindsValue() }\n    screenBinds.setValue(\"screenTitle\", \"Home\")\n\n    // Get the parent BindsValue from CompositionLocal\n    val parentBinds = LocalBindsValue.current\n\n    // Combine with parent binds\n    val combinedBinds = screenBinds + parentBinds\n\n    // Use the combined binds\n    DynamicLayout(\n        component = createLayoutComponent(homeLayoutJson),\n        bindValue = combinedBinds\n    )\n}\n</code></pre>"},{"location":"02-setup/04-bind-values/#real-world-examples","title":"Real-World Examples","text":""},{"location":"02-setup/04-bind-values/#user-profile-card","title":"User Profile Card","text":"<pre><code>@Composable\nfun UserProfileCard(user: User) {\n    val bindsValue = remember { BindsValue() }\n\n    LaunchedEffect(user) {\n        bindsValue.setValue(\"name\", user.displayName)\n        bindsValue.setValue(\"email\", user.email)\n        bindsValue.setValue(\"initials\", user.getInitials())\n        bindsValue.setValue(\"memberType\", user.membershipType)\n\n        // Set color based on membership type\n        val memberColor = when (user.membershipType) {\n            \"premium\" -&gt; \"#FFD700\"  // Gold\n            \"plus\" -&gt; \"#C0C0C0\"     // Silver\n            else -&gt; \"#EEEEEE\"       // Default\n        }\n        bindsValue.setValue(\"memberColor\", memberColor)\n    }\n\n    val profileCardJson = \"\"\"\n    {\n      \"card\": {\n        \"modifier\": {\n          \"base\": {\n            \"fillMaxWidth\": true,\n            \"padding\": {\n              \"all\": 16\n            }\n          }\n        },\n        \"children\": [\n          {\n            \"row\": {\n              \"children\": [\n                {\n                  \"box\": {\n                    \"modifier\": {\n                      \"base\": {\n                        \"size\": 60,\n                        \"background\": {\n                          \"color\": \"{memberColor}\",\n                          \"shape\": \"circle\"\n                        }\n                      },\n                      \"contentAlignment\": \"center\"\n                    },\n                    \"children\": [\n                      {\n                        \"text\": {\n                          \"content\": \"{initials}\",\n                          \"fontSize\": 24,\n                          \"fontWeight\": \"bold\"\n                        }\n                      }\n                    ]\n                  }\n                },\n                {\n                  \"spacer\": {\n                    \"width\": 16\n                  }\n                },\n                {\n                  \"column\": {\n                    \"children\": [\n                      {\n                        \"text\": {\n                          \"content\": \"{name}\",\n                          \"fontSize\": 18,\n                          \"fontWeight\": \"bold\"\n                        }\n                      },\n                      {\n                        \"text\": {\n                          \"content\": \"{email}\",\n                          \"fontSize\": 14\n                        }\n                      },\n                      {\n                        \"text\": {\n                          \"content\": \"{memberType} member\",\n                          \"fontSize\": 12,\n                          \"fontWeight\": \"medium\",\n                          \"color\": \"{memberColor}\"\n                        }\n                      }\n                    ]\n                  }\n                }\n              ]\n            }\n          }\n        ]\n      }\n    }\n    \"\"\"\n\n    DynamicLayout(\n        component = createLayoutComponent(profileCardJson),\n        bindValue = bindsValue\n    )\n}\n</code></pre>"},{"location":"02-setup/04-bind-values/#real-time-dashboard","title":"Real-Time Dashboard","text":"<pre><code>@Composable\nfun MetricsDashboard(viewModel: DashboardViewModel) {\n    // Collect metrics state from ViewModel\n    val metrics by viewModel.metricsFlow.collectAsState()\n\n    val bindsValue = remember { BindsValue() }\n\n    // Update binds when metrics change\n    LaunchedEffect(metrics) {\n        // Basic metrics\n        bindsValue.setValue(\"activeUsers\", metrics.activeUsers.toString())\n        bindsValue.setValue(\"newSignups\", metrics.newSignups.toString())\n        bindsValue.setValue(\"totalRevenue\", \"$${metrics.revenue}\")\n\n        // Computed values\n        val userChange = metrics.userChangePercentage\n        bindsValue.setValue(\"userChangePercent\", \"${userChange.absoluteValue}%\")\n        bindsValue.setValue(\"userTrend\", if (userChange &gt;= 0) \"\u25b2\" else \"\u25bc\")\n        bindsValue.setValue(\"userTrendColor\", if (userChange &gt;= 0) \"#00AA00\" else \"#AA0000\")\n\n        // Format chart data\n        bindsValue.setValue(\"chartData\", metrics.weeklyData.joinToString(\",\"))\n    }\n\n    DynamicLayout(\n        component = createLayoutComponent(dashboardLayoutJson),\n        bindValue = bindsValue\n    )\n}\n</code></pre>"},{"location":"02-setup/04-bind-values/#best-practices","title":"Best Practices","text":""},{"location":"02-setup/04-bind-values/#1-use-descriptive-key-names","title":"1. Use Descriptive Key Names","text":"<p>Choose clear, descriptive keys that indicate their purpose:</p> <pre><code>// Good\nbindsValue.setValue(\"userFullName\", user.fullName)\nbindsValue.setValue(\"orderTotalPrice\", \"$${order.totalPrice}\")\n\n// Avoid\nbindsValue.setValue(\"var1\", user.fullName)\nbindsValue.setValue(\"price\", \"$${order.totalPrice}\")\n</code></pre>"},{"location":"02-setup/04-bind-values/#2-organize-related-values","title":"2. Organize Related Values","text":"<p>Group related values using a consistent naming convention:</p> <pre><code>// User information\nbindsValue.setValue(\"user_name\", user.name)\nbindsValue.setValue(\"user_email\", user.email)\nbindsValue.setValue(\"user_memberSince\", user.joinDate.format(\"MMM yyyy\"))\n\n// Theme colors\nbindsValue.setValue(\"color_primary\", theme.primaryColor)\nbindsValue.setValue(\"color_text\", theme.textColor)\nbindsValue.setValue(\"color_background\", theme.backgroundColor)\n</code></pre>"},{"location":"02-setup/04-bind-values/#3-transform-data-before-binding","title":"3. Transform Data Before Binding","text":"<p>Process data into display-ready format before binding:</p> <pre><code>// Format values appropriately before binding\nbindsValue.setValue(\"orderDate\", order.date.format(\"MMM dd, yyyy\"))\nbindsValue.setValue(\"price\", NumberFormat.getCurrencyInstance().format(product.price))\nbindsValue.setValue(\"itemCount\", \"${cart.items.size} items\")\n</code></pre>"},{"location":"02-setup/04-bind-values/#4-avoid-complex-logic-in-templates","title":"4. Avoid Complex Logic in Templates","text":"<p>Keep the JSON templates focused on presentation, not business logic:</p> <pre><code>// Do this: Process in Kotlin, then bind the result\nval status = when {\n    order.isDelivered -&gt; \"Delivered\"\n    order.isShipped -&gt; \"Shipped on ${order.shipDate.format(\"MMM dd\")}\"\n    order.isProcessing -&gt; \"Processing\"\n    else -&gt; \"Order received\"\n}\nbindsValue.setValue(\"orderStatus\", status)\nbindsValue.setValue(\"statusColor\", getStatusColor(order))\n\n// Instead of trying to handle this in the template with multiple bindings\n// This would make the JSON template more complex and brittle\n</code></pre>"},{"location":"02-setup/04-bind-values/#5-update-efficiently","title":"5. Update Efficiently","text":"<p>Only update bind values when the source data actually changes:</p> <pre><code>// Good: Only update when user changes\nLaunchedEffect(user.id) {\n    bindsValue.setValue(\"username\", user.displayName)\n    // other user properties...\n}\n\n// Avoid: Updating unnecessarily on every recomposition\nbindsValue.setValue(\"username\", user.displayName)\n</code></pre>"},{"location":"02-setup/04-bind-values/#6-provide-fallbacks-in-json","title":"6. Provide Fallbacks in JSON","text":"<p>When appropriate, include fallback values in your JSON:</p> <pre><code>{\n  \"text\": {\n    \"content\": \"{username|Guest}\"\n  }\n}\n</code></pre> <p>Note: This is a suggested feature not currently in the library. In the current implementation, missing values stay as <code>{key}</code> in the output.</p>"},{"location":"02-setup/04-bind-values/#troubleshooting","title":"Troubleshooting","text":""},{"location":"02-setup/04-bind-values/#problem-bind-value-not-updating","title":"Problem: Bind Value Not Updating","text":"<p>Possible causes:</p> <ul> <li>Value not set in the BindsValue instance</li> <li>Key mismatch between setValue and JSON</li> <li>BindsValue not passed to DynamicLayout</li> </ul> <p>Solutions:</p> <ul> <li>Double-check key spelling and case</li> <li>Verify that setValue is actually called</li> <li>Make sure the same BindsValue instance is passed to DynamicLayout</li> </ul>"},{"location":"02-setup/04-bind-values/#problem-changes-not-reflecting-in-ui","title":"Problem: Changes Not Reflecting in UI","text":"<p>Possible causes:</p> <ul> <li>Missing LaunchedEffect dependency</li> <li>Using the wrong BindsValue instance</li> <li>State changes not triggering recomposition</li> </ul> <p>Solutions:</p> <ul> <li>Add proper dependencies to LaunchedEffect</li> <li>Use remember to maintain BindsValue instance</li> <li>Make sure state changes trigger recomposition</li> </ul>"},{"location":"02-setup/04-bind-values/#next-steps","title":"Next Steps","text":"<p>Now that you understand how to use bind values, learn about:</p> <ol> <li>Handling user actions with click events</li> </ol>"},{"location":"02-setup/05-bind-actions/","title":"Bind Actions","text":"<p>Compose Remote Layout provides a powerful event handling system that allows you to create interactive UIs that respond to user actions. This guide explains how to implement and manage click events in your dynamic layouts.</p>"},{"location":"02-setup/05-bind-actions/#understanding-action-binding","title":"Understanding Action Binding","text":"<p>Action binding allows your JSON-defined layouts to respond to user interactions in ways that you define in your Kotlin code. This creates an end-to-end connection from your remote layouts to your application logic.</p> <p>Key benefits include:</p> <ul> <li>Separation of concerns: Layout defines appearance, Kotlin code defines behavior</li> <li>Dynamic behavior: Change both UI and interactions without app updates</li> <li>Type safety: Handle events in typed Kotlin code, not in JSON</li> <li>Integration with app logic: Connect actions to your existing navigation, state management,   etc.</li> </ul>"},{"location":"02-setup/05-bind-actions/#basic-click-handling","title":"Basic Click Handling","text":""},{"location":"02-setup/05-bind-actions/#step-1-define-clickable-elements-in-json","title":"Step 1: Define Clickable Elements in JSON","text":"<p>You can make components clickable by adding a <code>clickId</code> in one of two ways:</p> <p>For Button components, use the <code>clickId</code> property directly:</p> <pre><code>{\n  \"button\": {\n    \"content\": \"Sign In\",\n    \"clickId\": \"login_button\"\n  }\n}\n</code></pre> <p>For other components, add <code>clickId</code> to the base modifier:</p> <pre><code>{\n  \"card\": {\n    \"modifier\": {\n      \"base\": {\n        \"clickId\": \"open_profile\",\n        \"padding\": {\n          \"all\": 16\n        }\n      }\n    },\n    \"children\": [\n      {\n        \"text\": {\n          \"content\": \"View Profile\"\n        }\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"02-setup/05-bind-actions/#step-2-handle-click-events-in-kotlin","title":"Step 2: Handle Click Events in Kotlin","text":"<p>The <code>DynamicLayout</code> composable accepts an <code>onClickHandler</code> parameter, which is a function that receives the clickId:</p> <pre><code>@Composable\nfun LoginScreen(viewModel: LoginViewModel) {\n    val layoutJson = \"\"\"\n    {\n      \"column\": {\n        \"modifier\": {\n          \"base\": {\n            \"fillMaxWidth\": true,\n            \"padding\": {\n              \"all\": 24\n            }\n          },\n          \"verticalArrangement\": \"spaceBetween\"\n        },\n        \"children\": [\n          {\n            \"text\": {\n              \"content\": \"Welcome Back\",\n              \"fontSize\": 24,\n              \"fontWeight\": \"bold\",\n              \"textAlign\": \"center\"\n            }\n          },\n          {\n            \"button\": {\n              \"content\": \"Sign In with Email\",\n              \"clickId\": \"login_email\",\n              \"modifier\": {\n                \"base\": {\n                  \"fillMaxWidth\": true\n                }\n              }\n            }\n          },\n          {\n            \"button\": {\n              \"content\": \"Sign In with Google\",\n              \"clickId\": \"login_google\",\n              \"modifier\": {\n                \"base\": {\n                  \"fillMaxWidth\": true\n                }\n              }\n            }\n          },\n          {\n            \"text\": {\n              \"content\": \"Forgot Password?\",\n              \"textAlign\": \"center\",\n              \"modifier\": {\n                \"base\": {\n                  \"clickId\": \"forgot_password\"\n                }\n              }\n            }\n          }\n        ]\n      }\n    }\n    \"\"\"\n\n    val component = createLayoutComponent(layoutJson)\n\n    DynamicLayout(\n        component = component,\n        onClickHandler = { clickId -&gt;\n            // Handle clicks based on ID\n            when (clickId) {\n                \"login_email\" -&gt; viewModel.navigateToEmailLogin()\n                \"login_google\" -&gt; viewModel.initiateGoogleLogin()\n                \"forgot_password\" -&gt; viewModel.navigateToPasswordReset()\n            }\n        }\n    )\n}\n</code></pre>"},{"location":"02-setup/05-bind-actions/#advanced-action-patterns","title":"Advanced Action Patterns","text":""},{"location":"02-setup/05-bind-actions/#passing-parameters-through-click-ids","title":"Passing Parameters through Click IDs","text":"<p>You can encode additional data in click IDs using a structured format:</p> <pre><code>{\n  \"text\": {\n    \"content\": \"View Details\",\n    \"modifier\": {\n      \"base\": {\n        \"clickId\": \"view_product:123\"\n      }\n    }\n  }\n}\n</code></pre> <p>Then extract the parameters in your click handler:</p> <pre><code>DynamicLayout(\n    component = component,\n    onClickHandler = { clickId -&gt;\n        if (clickId.startsWith(\"view_product:\")) {\n            val productId = clickId.split(\":\")[1]\n            navigateToProductDetail(productId)\n        }\n    }\n)\n</code></pre> <p>Common patterns include:</p> <ul> <li>Using colon as separator: <code>\"action:parameter\"</code></li> <li>Multiple parameters: <code>\"action:param1:param2\"</code></li> <li>Key-value pairs: <code>\"action:id=123:type=product\"</code></li> </ul>"},{"location":"02-setup/05-bind-actions/#click-actions-with-bind-values","title":"Click Actions with Bind Values","text":"<p>Combine click actions with bind values for dynamic behavior:</p> <pre><code>@Composable\nfun ProductListScreen(products: List&lt;Product&gt;) {\n    val bindsValue = remember { BindsValue() }\n\n    // Update the product list in binds\n    LaunchedEffect(products) {\n        // We'll build a string representing product rows\n        val productRows = products.mapIndexed { index, product -&gt;\n            \"\"\"\n            {\n              \"card\": {\n                \"modifier\": {\n                  \"base\": {\n                    \"clickId\": \"view_product:${product.id}\",\n                    \"padding\": {\n                      \"all\": 12\n                    },\n                    \"margin\": {\n                      \"bottom\": 8\n                    }\n                  }\n                },\n                \"children\": [\n                  {\n                    \"row\": {\n                      \"children\": [\n                        {\n                          \"text\": {\n                            \"content\": \"${product.name}\",\n                            \"fontSize\": 16,\n                            \"fontWeight\": \"medium\"\n                          }\n                        },\n                        {\n                          \"text\": {\n                            \"content\": \"$${product.price}\",\n                            \"fontSize\": 16,\n                            \"textAlign\": \"end\"\n                          }\n                        }\n                      ]\n                    }\n                  }\n                ]\n              }\n            }\n            \"\"\"\n        }.joinToString(\",\\n\")\n\n        // Set the products JSON as a bind value\n        bindsValue.setValue(\"productItems\", productRows)\n    }\n\n    // This layout uses bind value to insert dynamically built product items\n    val layoutJson = \"\"\"\n    {\n      \"column\": {\n        \"modifier\": {\n          \"base\": {\n            \"fillMaxWidth\": true,\n            \"padding\": {\n              \"all\": 16\n            }\n          }\n        },\n        \"children\": [\n          {\n            \"text\": {\n              \"content\": \"Products\",\n              \"fontSize\": 24,\n              \"fontWeight\": \"bold\",\n              \"modifier\": {\n                \"base\": {\n                  \"padding\": {\n                    \"bottom\": 16\n                  }\n                }\n              }\n            }\n          },\n          {productItems}\n        ]\n      }\n    }\n    \"\"\"\n\n    val component = createLayoutComponent(layoutJson)\n\n    DynamicLayout(\n        component = component,\n        bindValue = bindsValue,\n        onClickHandler = { clickId -&gt;\n            if (clickId.startsWith(\"view_product:\")) {\n                val productId = clickId.split(\":\")[1]\n                navigateToProductDetail(productId)\n            }\n        }\n    )\n}\n</code></pre>"},{"location":"02-setup/05-bind-actions/#implementing-a-counter","title":"Implementing a Counter","text":"<p>A simple interactive counter component with bind values and actions:</p> <pre><code>@Composable\nfun CounterExample() {\n    var count by remember { mutableStateOf(0) }\n    val bindsValue = remember { BindsValue() }\n\n    // Update binds when count changes\n    LaunchedEffect(count) {\n        bindsValue.setValue(\"count\", count.toString())\n\n        // Set color based on count value\n        val color = when {\n            count &gt; 10 -&gt; \"#00AA00\"  // Green for high values\n            count &lt; 0 -&gt; \"#AA0000\"   // Red for negative values\n            else -&gt; \"#000000\"        // Black for normal values\n        }\n        bindsValue.setValue(\"countColor\", color)\n    }\n\n    val countLayoutJson = \"\"\"\n    {\n      \"column\": {\n        \"modifier\": {\n          \"base\": {\n            \"fillMaxWidth\": true,\n            \"padding\": {\n              \"all\": 24\n            }\n          },\n          \"horizontalAlignment\": \"center\",\n          \"verticalArrangement\": \"spaceBetween\"\n        },\n        \"children\": [\n          {\n            \"text\": {\n              \"content\": \"Counter Example\",\n              \"fontSize\": 24,\n              \"fontWeight\": \"bold\"\n            }\n          },\n          {\n            \"text\": {\n              \"content\": \"{count}\",\n              \"fontSize\": 64,\n              \"fontWeight\": \"bold\",\n              \"color\": \"{countColor}\",\n              \"modifier\": {\n                \"base\": {\n                  \"padding\": {\n                    \"vertical\": 32\n                  }\n                }\n              }\n            }\n          },\n          {\n            \"row\": {\n              \"modifier\": {\n                \"base\": {\n                  \"fillMaxWidth\": true\n                },\n                \"horizontalArrangement\": \"spaceEvenly\"\n              },\n              \"children\": [\n                {\n                  \"button\": {\n                    \"content\": \"-\",\n                    \"clickId\": \"decrement\",\n                    \"fontSize\": 20\n                  }\n                },\n                {\n                  \"button\": {\n                    \"content\": \"+\",\n                    \"clickId\": \"increment\",\n                    \"fontSize\": 20\n                  }\n                }\n              ]\n            }\n          },\n          {\n            \"button\": {\n              \"content\": \"Reset\",\n              \"clickId\": \"reset\",\n              \"modifier\": {\n                \"base\": {\n                  \"fillMaxWidth\": true,\n                  \"padding\": {\n                    \"vertical\": 8\n                  }\n                }\n              }\n            }\n          }\n        ]\n      }\n    }\n    \"\"\"\n\n    val component = createLayoutComponent(countLayoutJson)\n\n    DynamicLayout(\n        component = component,\n        bindValue = bindsValue,\n        onClickHandler = { clickId -&gt;\n            when (clickId) {\n                \"increment\" -&gt; count++\n                \"decrement\" -&gt; count--\n                \"reset\" -&gt; count = 0\n            }\n        }\n    )\n}\n</code></pre>"},{"location":"02-setup/05-bind-actions/#integration-with-app-architecture","title":"Integration with App Architecture","text":""},{"location":"02-setup/05-bind-actions/#viewmodel-integration","title":"ViewModel Integration","text":"<p>Delegate click handling to a ViewModel for clean architecture:</p> <pre><code>@Composable\nfun ProductScreen(viewModel: ProductViewModel) {\n    // Observe layout JSON from ViewModel\n    val layoutJson by viewModel.layoutJson.collectAsState()\n\n    // Observe bound values from ViewModel\n    val bindsValue by viewModel.bindsValue.collectAsState()\n\n    val component = createLayoutComponent(layoutJson)\n\n    DynamicLayout(\n        component = component,\n        bindValue = bindsValue,\n        onClickHandler = { clickId -&gt; viewModel.handleClick(clickId) }\n    )\n}\n\nclass ProductViewModel : ViewModel() {\n    // State holders\n    private val _layoutJson = MutableStateFlow(\"\")\n    val layoutJson: StateFlow&lt;String&gt; = _layoutJson\n\n    private val _bindsValue = MutableStateFlow(BindsValue())\n    val bindsValue: StateFlow&lt;BindsValue&gt; = _bindsValue\n\n    init {\n        // Load layout\n        viewModelScope.launch {\n            _layoutJson.value = repository.getProductLayoutJson()\n            refreshProducts()\n        }\n    }\n\n    private fun refreshProducts() {\n        viewModelScope.launch {\n            val products = repository.getProducts()\n\n            // Update binds with product data\n            val currentBinds = _bindsValue.value\n            products.forEachIndexed { index, product -&gt;\n                currentBinds.setValue(\"product_${index}_name\", product.name)\n                currentBinds.setValue(\"product_${index}_price\", \"$${product.price}\")\n                currentBinds.setValue(\"product_${index}_id\", product.id)\n            }\n            currentBinds.setValue(\"productCount\", products.size.toString())\n\n            // Trigger update\n            _bindsValue.value = currentBinds\n        }\n    }\n\n    fun handleClick(clickId: String) {\n        when {\n            clickId.startsWith(\"view_product:\") -&gt; {\n                val productId = clickId.split(\":\")[1]\n                navigateToProductDetail(productId)\n            }\n            clickId == \"refresh_products\" -&gt; {\n                refreshProducts()\n            }\n            clickId == \"filter_products\" -&gt; {\n                showFilterDialog()\n            }\n            // Handle other clicks\n        }\n    }\n\n    private fun navigateToProductDetail(productId: String) {\n        // Navigation logic\n    }\n\n    private fun showFilterDialog() {\n        // Dialog logic\n    }\n}\n</code></pre>"},{"location":"02-setup/05-bind-actions/#navigation-integration","title":"Navigation Integration","text":"<p>Connect click events to navigation actions:</p> <pre><code>@Composable\nfun NavigationMenuScreen(navController: NavController) {\n    val menuLayoutJson = \"\"\"\n    {\n      \"column\": {\n        \"modifier\": {\n          \"base\": {\n            \"fillMaxWidth\": true,\n            \"padding\": {\n              \"all\": 16\n            }\n          }\n        },\n        \"children\": [\n          {\n            \"text\": {\n              \"content\": \"Main Menu\",\n              \"fontSize\": 24,\n              \"fontWeight\": \"bold\",\n              \"modifier\": {\n                \"base\": {\n                  \"padding\": {\n                    \"bottom\": 16\n                  }\n                }\n              }\n            }\n          },\n          {\n            \"card\": {\n              \"modifier\": {\n                \"base\": {\n                  \"fillMaxWidth\": true,\n                  \"clickId\": \"nav_home\",\n                  \"padding\": {\n                    \"all\": 16\n                  },\n                  \"margin\": {\n                    \"bottom\": 8\n                  }\n                }\n              },\n              \"children\": [\n                {\n                  \"text\": {\n                    \"content\": \"Home\",\n                    \"fontSize\": 18\n                  }\n                }\n              ]\n            }\n          },\n          {\n            \"card\": {\n              \"modifier\": {\n                \"base\": {\n                  \"fillMaxWidth\": true,\n                  \"clickId\": \"nav_profile\",\n                  \"padding\": {\n                    \"all\": 16\n                  },\n                  \"margin\": {\n                    \"bottom\": 8\n                  }\n                }\n              },\n              \"children\": [\n                {\n                  \"text\": {\n                    \"content\": \"Profile\",\n                    \"fontSize\": 18\n                  }\n                }\n              ]\n            }\n          },\n          {\n            \"card\": {\n              \"modifier\": {\n                \"base\": {\n                  \"fillMaxWidth\": true,\n                  \"clickId\": \"nav_settings\",\n                  \"padding\": {\n                    \"all\": 16\n                  },\n                  \"margin\": {\n                    \"bottom\": 8\n                  }\n                }\n              },\n              \"children\": [\n                {\n                  \"text\": {\n                    \"content\": \"Settings\",\n                    \"fontSize\": 18\n                  }\n                }\n              ]\n            }\n          },\n          {\n            \"button\": {\n              \"content\": \"Logout\",\n              \"clickId\": \"logout\",\n              \"modifier\": {\n                \"base\": {\n                  \"fillMaxWidth\": true,\n                  \"margin\": {\n                    \"top\": 16\n                  }\n                }\n              }\n            }\n          }\n        ]\n      }\n    }\n    \"\"\"\n\n    val component = createLayoutComponent(menuLayoutJson)\n\n    DynamicLayout(\n        component = component,\n        onClickHandler = { clickId -&gt;\n            when (clickId) {\n                \"nav_home\" -&gt; navController.navigate(\"home\")\n                \"nav_profile\" -&gt; navController.navigate(\"profile\")\n                \"nav_settings\" -&gt; navController.navigate(\"settings\")\n                \"logout\" -&gt; {\n                    // Perform logout operations\n                    AuthManager.logout()\n                    navController.navigate(\"login\") {\n                        popUpTo(\"home\") { inclusive = true }\n                    }\n                }\n            }\n        }\n    )\n}\n</code></pre>"},{"location":"02-setup/05-bind-actions/#state-management-integration","title":"State Management Integration","text":"<p>Integrate with state management solutions like MVI/Redux:</p> <pre><code>@Composable\nfun ShoppingCartScreen(store: ReduxStore&lt;AppState, AppAction&gt;) {\n    // Observe state from the store\n    val state by store.state.collectAsState()\n\n    // Create bind values from the state\n    val bindsValue = remember { BindsValue() }\n\n    // Update binds when state changes\n    LaunchedEffect(state.cart) {\n        bindsValue.setValue(\"itemCount\", state.cart.items.size.toString())\n        bindsValue.setValue(\"totalPrice\", \"$${state.cart.totalPrice}\")\n        bindsValue.setValue(\"isCheckoutEnabled\", state.cart.canCheckout().toString())\n    }\n\n    val component = createLayoutComponent(cartLayoutJson)\n\n    DynamicLayout(\n        component = component,\n        bindValue = bindsValue,\n        onClickHandler = { clickId -&gt;\n            // Dispatch actions to the store based on clicks\n            when {\n                clickId == \"checkout\" -&gt; {\n                    store.dispatch(CartAction.Checkout)\n                }\n                clickId == \"clear_cart\" -&gt; {\n                    store.dispatch(CartAction.ClearCart)\n                }\n                clickId.startsWith(\"remove_item:\") -&gt; {\n                    val itemId = clickId.split(\":\")[1]\n                    store.dispatch(CartAction.RemoveItem(itemId))\n                }\n                clickId.startsWith(\"quantity_plus:\") -&gt; {\n                    val itemId = clickId.split(\":\")[1]\n                    store.dispatch(CartAction.IncrementQuantity(itemId))\n                }\n                clickId.startsWith(\"quantity_minus:\") -&gt; {\n                    val itemId = clickId.split(\":\")[1]\n                    store.dispatch(CartAction.DecrementQuantity(itemId))\n                }\n            }\n        }\n    )\n}\n</code></pre>"},{"location":"02-setup/05-bind-actions/#custom-components-with-click-events","title":"Custom Components with Click Events","text":"<p>When creating custom components, you can handle clicks internally or pass them to the parent:</p> <pre><code>// Register a custom product card component\nCustomNodes.register(\"product_card\") { param -&gt;\n    val name = param.data[\"name\"] ?: \"Unknown Product\"\n    val price = param.data[\"price\"] ?: \"$0.00\"\n    val imageUrl = param.data[\"imageUrl\"]\n    val productId = param.data[\"id\"] ?: \"\"\n\n    Card(\n        modifier = param.modifier\n            .clickable {\n                // Pass click to parent handler with product ID\n                param.onClickHandler(\"view_product:$productId\")\n            }\n    ) {\n        Column(modifier = Modifier.padding(16.dp)) {\n            // Product image, name, and price...\n\n            Row(\n                modifier = Modifier.fillMaxWidth(),\n                horizontalArrangement = Arrangement.SpaceBetween\n            ) {\n                // These buttons handle their own click events\n                Button(\n                    onClick = {\n                        // Internal handling for immediate add to cart\n                        CartManager.addItem(productId)\n                    }\n                ) {\n                    Text(\"Add to Cart\")\n                }\n\n                // This button passes the click to parent\n                Button(\n                    onClick = {\n                        param.onClickHandler(\"wishlist_add:$productId\")\n                    }\n                ) {\n                    Text(\"Wishlist\")\n                }\n            }\n        }\n    }\n}\n\n// Usage in JSON\nval json = \"\"\"\n{\n  \"product_card\": {\n    \"name\": \"Premium Headphones\",\n    \"price\": \"$149.99\",\n    \"imageUrl\": \"https://example.com/headphones.jpg\",\n    \"id\": \"prod-123\"\n  }\n}\n\"\"\"\n</code></pre>"},{"location":"02-setup/05-bind-actions/#best-practices","title":"Best Practices","text":""},{"location":"02-setup/05-bind-actions/#1-use-consistent-naming-conventions","title":"1. Use Consistent Naming Conventions","text":"<p>Establish a standard pattern for your click IDs:</p> <pre><code>// Consistent naming convention examples:\n// Action-based: verb_object\n\"add_to_cart\"\n\"view_details\"\n\"submit_form\"\n\n// Screen-based: screen_action\n\"checkout_continue\"\n\"profile_edit\"\n\n// With parameters: action:parameter\n\"remove_item:12345\"\n\"select_category:electronics\"\n</code></pre>"},{"location":"02-setup/05-bind-actions/#2-organize-click-handlers","title":"2. Organize Click Handlers","text":"<p>For complex screens, organize click handling by category:</p> <pre><code>// In your ViewModel or Controller\nfun handleClick(clickId: String) {\n    when {\n        // Navigation actions\n        clickId.startsWith(\"nav_\") -&gt; handleNavigation(clickId)\n\n        // Item interactions\n        clickId.startsWith(\"item_\") -&gt; handleItemAction(clickId)\n\n        // Form actions\n        clickId.startsWith(\"form_\") -&gt; handleFormAction(clickId)\n\n        // Misc actions\n        else -&gt; handleMiscAction(clickId)\n    }\n}\n\nprivate fun handleNavigation(clickId: String) {\n    when (clickId) {\n        \"nav_home\" -&gt; navigator.navigateTo(Screen.Home)\n        \"nav_profile\" -&gt; navigator.navigateTo(Screen.Profile)\n        // More navigation handlers...\n    }\n}\n\nprivate fun handleItemAction(clickId: String) {\n    // Extract the action and item ID\n    val parts = clickId.split(\"_\", \":\")\n    if (parts.size &gt;= 3) {\n        val action = parts[1]\n        val itemId = parts[2]\n\n        when (action) {\n            \"view\" -&gt; viewItem(itemId)\n            \"edit\" -&gt; editItem(itemId)\n            \"delete\" -&gt; deleteItem(itemId)\n            // More item actions...\n        }\n    }\n}\n\n// Additional handler methods...\n</code></pre>"},{"location":"02-setup/05-bind-actions/#3-fail-gracefully","title":"3. Fail Gracefully","text":"<p>Handle unexpected click IDs gracefully:</p> <pre><code>fun handleClick(clickId: String) {\n    try {\n        when {\n            clickId.startsWith(\"view_product:\") -&gt; {\n                val productId = clickId.split(\":\")[1]\n                navigateToProductDetail(productId)\n            }\n            // Other click handlers...\n            else -&gt; {\n                // Log unknown clickId for debugging\n                analytics.logEvent(\"unknown_click_id\", mapOf(\"id\" to clickId))\n            }\n        }\n    } catch (e: Exception) {\n        // Log error\n        analytics.logError(\"click_handler_error\", e)\n        // Fallback behavior if needed\n    }\n}\n</code></pre>"},{"location":"02-setup/05-bind-actions/#4-use-analytics-for-click-tracking","title":"4. Use Analytics for Click Tracking","text":"<p>Track important user interactions:</p> <pre><code>fun handleClick(clickId: String) {\n    // Log the click event\n    analytics.logEvent(\"remote_layout_click\", mapOf(\"click_id\" to clickId))\n\n    // Then handle the click\n    when (clickId) {\n        \"add_to_cart\" -&gt; {\n            addToCart()\n            // Log specific business event\n            analytics.logEvent(\n                \"add_to_cart\", mapOf(\n                    \"product_id\" to currentProductId,\n                    \"price\" to currentProductPrice\n                )\n            )\n        }\n        // More handlers...\n    }\n}\n</code></pre>"},{"location":"02-setup/05-bind-actions/#5-test-click-handlers","title":"5. Test Click Handlers","text":"<p>Write unit tests for your click handling logic:</p> <pre><code>@Test\nfun `when product view click received, navigation is triggered`() {\n    // GIVEN\n    val viewModel = ProductViewModel(mockRepository, mockNavigator)\n\n    // WHEN\n    viewModel.handleClick(\"view_product:123\")\n\n    // THEN\n    verify(mockNavigator).navigateTo(Screen.ProductDetail(\"123\"))\n}\n</code></pre>"},{"location":"02-setup/05-bind-actions/#common-patterns","title":"Common Patterns","text":""},{"location":"02-setup/05-bind-actions/#form-submission","title":"Form Submission","text":"<p>Handle form submission with validation:</p> <pre><code>@Composable\nfun DynamicForm(viewModel: FormViewModel) {\n    val formState by viewModel.formState.collectAsState()\n    val bindsValue = remember { BindsValue() }\n\n    // Update binds when form state changes\n    LaunchedEffect(formState) {\n        bindsValue.setValue(\"nameValue\", formState.name)\n        bindsValue.setValue(\"emailValue\", formState.email)\n        bindsValue.setValue(\"nameError\", formState.nameError ?: \"\")\n        bindsValue.setValue(\"emailError\", formState.emailError ?: \"\")\n        bindsValue.setValue(\"isSubmitEnabled\", (!formState.hasErrors).toString())\n    }\n\n    // Form layout with input fields and validation error messages\n    val formLayoutJson = \"\"\"\n    {\n      \"column\": {\n        \"modifier\": {\n          \"base\": {\n            \"fillMaxWidth\": true,\n            \"padding\": {\n              \"all\": 16\n            }\n          }\n        },\n        \"children\": [\n          {\n            \"text\": {\n              \"content\": \"Contact Form\",\n              \"fontSize\": 24,\n              \"fontWeight\": \"bold\"\n            }\n          },\n          {\n            \"text\": {\n              \"content\": \"Name:\",\n              \"fontSize\": 16\n            }\n          },\n          {\n            \"custom_text_field\": {\n              \"value\": \"{nameValue}\",\n              \"placeholder\": \"Enter your name\",\n              \"onChange\": \"update_name\",\n              \"error\": \"{nameError}\"\n            }\n          },\n          {\n            \"text\": {\n              \"content\": \"Email:\",\n              \"fontSize\": 16\n            }\n          },\n          {\n            \"custom_text_field\": {\n              \"value\": \"{emailValue}\",\n              \"placeholder\": \"Enter your email\",\n              \"onChange\": \"update_email\",\n              \"error\": \"{emailError}\"\n            }\n          },\n          {\n            \"button\": {\n              \"content\": \"Submit\",\n              \"clickId\": \"submit_form\",\n              \"modifier\": {\n                \"base\": {\n                  \"fillMaxWidth\": true,\n                  \"margin\": {\n                    \"top\": 16\n                  }\n                }\n              }\n            }\n          }\n        ]\n      }\n    }\n    \"\"\"\n\n    val component = createLayoutComponent(formLayoutJson)\n\n    DynamicLayout(\n        component = component,\n        bindValue = bindsValue,\n        onClickHandler = { clickId -&gt;\n            when (clickId) {\n                \"submit_form\" -&gt; viewModel.submitForm()\n                // Handle other actions...\n            }\n        }\n    )\n}\n</code></pre>"},{"location":"02-setup/05-bind-actions/#handling-multiple-selection","title":"Handling Multiple Selection","text":"<p>Implement a selection mechanism:</p> <pre><code>@Composable\nfun SelectionExample() {\n    var selectedItems by remember { mutableStateOf(setOf&lt;String&gt;()) }\n    val bindsValue = remember { BindsValue() }\n\n    // Items to choose from\n    val items = listOf(\"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\")\n\n    // Update binds when selection changes\n    LaunchedEffect(selectedItems) {\n        items.forEachIndexed { index, item -&gt;\n            val isSelected = selectedItems.contains(item)\n            bindsValue.setValue(\"item_${index}_selected\", isSelected.toString())\n            bindsValue.setValue(\"item_${index}_bg_color\", if (isSelected) \"#E3F2FD\" else \"#FFFFFF\")\n        }\n\n        bindsValue.setValue(\"selected_count\", \"${selectedItems.size} selected\")\n        bindsValue.setValue(\"can_proceed\", (selectedItems.isNotEmpty()).toString())\n    }\n\n    // Generate JSON for the selectable items\n    val itemsJson = items.mapIndexed { index, item -&gt;\n        \"\"\"\n        {\n          \"card\": {\n            \"modifier\": {\n              \"base\": {\n                \"fillMaxWidth\": true,\n                \"clickId\": \"toggle_item:$index\",\n                \"padding\": {\n                  \"all\": 16\n                },\n                \"margin\": {\n                  \"vertical\": 4\n                },\n                \"background\": {\n                  \"color\": \"{item_${index}_bg_color}\"\n                }\n              }\n            },\n            \"children\": [\n              {\n                \"row\": {\n                  \"modifier\": {\n                    \"verticalAlignment\": \"center\"\n                  },\n                  \"children\": [\n                    {\n                      \"text\": {\n                        \"content\": \"$item\",\n                        \"fontSize\": 16\n                      }\n                    }\n                  ]\n                }\n              }\n            ]\n          }\n        }\n        \"\"\"\n    }.joinToString(\",\\n\")\n\n    // Selection screen layout\n    val layoutJson = \"\"\"\n    {\n      \"column\": {\n        \"modifier\": {\n          \"base\": {\n            \"fillMaxWidth\": true,\n            \"padding\": {\n              \"all\": 16\n            }\n          }\n        },\n        \"children\": [\n          {\n            \"text\": {\n              \"content\": \"Select Items\",\n              \"fontSize\": 24,\n              \"fontWeight\": \"bold\"\n            }\n          },\n          {\n            \"text\": {\n              \"content\": \"{selected_count}\",\n              \"fontSize\": 16,\n              \"color\": \"#666666\",\n              \"modifier\": {\n                \"base\": {\n                  \"padding\": {\n                    \"vertical\": 8\n                  }\n                }\n              }\n            }\n          },\n          $itemsJson,\n          {\n            \"button\": {\n              \"content\": \"Continue\",\n              \"clickId\": \"continue\",\n              \"modifier\": {\n                \"base\": {\n                  \"fillMaxWidth\": true,\n                  \"margin\": {\n                    \"top\": 16\n                  }\n                }\n              }\n            }\n          }\n        ]\n      }\n    }\n    \"\"\"\n\n    val component = createLayoutComponent(layoutJson)\n\n    DynamicLayout(\n        component = component,\n        bindValue = bindsValue,\n        onClickHandler = { clickId -&gt;\n            when {\n                clickId.startsWith(\"toggle_item:\") -&gt; {\n                    val index = clickId.split(\":\")[1].toInt()\n                    val item = items[index]\n\n                    selectedItems = if (selectedItems.contains(item)) {\n                        selectedItems - item  // Remove item if already selected\n                    } else {\n                        selectedItems + item  // Add item if not selected\n                    }\n                }\n                clickId == \"continue\" -&gt; {\n                    if (selectedItems.isNotEmpty()) {\n                        // Handle continue action with selected items\n                    }\n                }\n            }\n        }\n    )\n}\n</code></pre>"},{"location":"02-setup/05-bind-actions/#next-steps","title":"Next Steps","text":"<p>Now that you understand how to handle user actions in your dynamic layouts, you can:</p> <ol> <li>Explore the JSON structure in detail to create    effective layouts</li> <li>Learn about how to register Custom Components    for more complex UI elements</li> </ol>"},{"location":"02-setup/05a-custom-node/","title":"Custom Compose Component","text":"<p>The Compose Remote Layout library comes with built-in components like Column, Row, Text, and Button. However, your application often requires specialized UI elements that aren't part of the standard set. Custom Nodes allow you to extend the library with your own reusable components.</p>"},{"location":"02-setup/05a-custom-node/#understanding-custom-nodes","title":"Understanding Custom Nodes","text":"<p>Custom Nodes are a way to register your own Composable functions that can be referenced in JSON layouts. This creates a powerful extension mechanism that allows you to:</p> <ol> <li>Create application-specific components that match your design system</li> <li>Encapsulate complex UI logic in reusable components</li> <li>Integrate third-party libraries with Compose Remote Layout</li> <li>Maintain consistency across your application</li> </ol>"},{"location":"02-setup/05a-custom-node/#how-custom-nodes-work","title":"How Custom Nodes Work","text":"<p>The <code>CustomNodes</code> object is a registry for all your custom components. It maintains a map of component type names to Composable functions:</p> <pre><code>object CustomNodes {\n    private val nodes = mutableMapOf&lt;String, @Composable (NodeParam) -&gt; Unit&gt;()\n\n    fun register(\n        type: String,\n        node: @Composable (NodeParam) -&gt; Unit,\n    ) {\n        nodes[type.lowercase()] = node\n    }\n\n    fun get(type: String): (@Composable (NodeParam) -&gt; Unit)? = nodes[type.lowercase()]\n\n    fun exists(type: String): Boolean = nodes.containsKey(type.lowercase())\n\n    fun clear() {\n        nodes.clear()\n    }\n}\n</code></pre> <p>When the DynamicLayout encounters a component type that doesn't match any built-in component, it checks if a custom node is registered with that type. If found, it calls the corresponding Composable function.</p>"},{"location":"02-setup/05a-custom-node/#registering-custom-nodes","title":"Registering Custom Nodes","text":"<p>To register a custom node, call the <code>CustomNodes.register()</code> function, typically during application initialization:</p> <pre><code>// In your Application class or composition root\nfun registerCustomComponents() {\n    // Register a custom profile card component\n    CustomNodes.register(\"profile_card\") { param -&gt;\n        // Implementation of your custom component\n        Card(\n            modifier = param.modifier,\n            elevation = 4.dp\n        ) {\n            Row(modifier = Modifier.padding(16.dp)) {\n                // Avatar\n                Box(\n                    modifier = Modifier\n                        .size(50.dp)\n                        .background(Color.Gray, CircleShape),\n                    contentAlignment = Alignment.Center\n                ) {\n                    Text(\n                        text = param.data[\"initials\"] ?: \"?\",\n                        color = Color.White,\n                        fontWeight = FontWeight.Bold\n                    )\n                }\n\n                // User info\n                Column(\n                    modifier = Modifier\n                        .padding(start = 16.dp)\n                        .align(Alignment.CenterVertically)\n                ) {\n                    Text(\n                        text = param.data[\"name\"] ?: \"Unknown\",\n                        fontWeight = FontWeight.Bold\n                    )\n                    Text(\n                        text = param.data[\"role\"] ?: \"\",\n                        fontSize = 14.sp,\n                        color = Color.Gray\n                    )\n                }\n            }\n        }\n    }\n\n    // Register other custom components...\n}\n</code></pre>"},{"location":"02-setup/05a-custom-node/#the-nodeparam-object","title":"The NodeParam Object","text":"<p>Your custom component implementation receives a <code>NodeParam</code> object containing all the information needed to render the component:</p> <pre><code>data class NodeParam(\n    val data: Map&lt;String, String&gt;,          // Properties from JSON\n    val modifier: Modifier,                 // Combined modifiers\n    val children: List&lt;ComponentWrapper&gt;?,  // Child components (if any)\n    val path: String,                       // Component path in the tree\n    val parentScrollable: Boolean,          // If parent is scrollable\n    val onClickHandler: (String) -&gt; Unit,   // Click event handler\n    val bindsValue: BindsValue              // Value bindings\n)\n</code></pre> <p>Let's explore each parameter:</p>"},{"location":"02-setup/05a-custom-node/#data","title":"Data","text":"<p>The <code>data</code> map contains all properties defined in the JSON for your custom component:</p> <pre><code>{\n  \"profile_card\": {\n    \"name\": \"John Doe\",\n    \"role\": \"Software Engineer\",\n    \"initials\": \"JD\",\n    \"level\": \"Senior\"\n  }\n}\n</code></pre> <p>Access these properties in your implementation:</p> <pre><code>val name = param.data[\"name\"] ?: \"Unknown\"\nval role = param.data[\"role\"] ?: \"\"\nval initials = param.data[\"initials\"] ?: \"?\"\nval level = param.data[\"level\"] ?: \"\"\n</code></pre> <p>Always provide defaults for optional properties to make your components robust.</p>"},{"location":"02-setup/05a-custom-node/#modifier","title":"Modifier","text":"<p>The <code>modifier</code> parameter contains all modifiers applied to your component, including base modifiers like width, height, padding, etc.</p> <pre><code>// Use the provided modifier directly\nCard(\n    modifier = param.modifier,\n    elevation = 4.dp\n) {\n    // Component content\n}\n\n// Or combine with additional modifiers\nBox(\n    modifier = param.modifier\n        .padding(8.dp)  // Add extra padding\n        .clip(RoundedCornerShape(8.dp)),  // Add corner clipping\n    contentAlignment = Alignment.Center\n) {\n    // Component content\n}\n</code></pre>"},{"location":"02-setup/05a-custom-node/#children","title":"Children","text":"<p>The <code>children</code> parameter contains any child components defined in the JSON:</p> <pre><code>{\n  \"expandable_section\": {\n    \"title\": \"Section Title\",\n    \"expanded\": \"true\",\n    \"children\": [\n      {\n        \"text\": {\n          \"content\": \"Child content 1\"\n        }\n      },\n      {\n        \"text\": {\n          \"content\": \"Child content 2\"\n        }\n      }\n    ]\n  }\n}\n</code></pre> <p>Render these children in your implementation:</p> <pre><code>CustomNodes.register(\"expandable_section\") { param -&gt;\n    val title = param.data[\"title\"] ?: \"Section\"\n    val isExpanded = param.data[\"expanded\"]?.toBoolean() ?: false\n\n    var expanded by remember { mutableStateOf(isExpanded) }\n\n    Column(modifier = param.modifier) {\n        // Header with toggle\n        Row(\n            modifier = Modifier\n                .fillMaxWidth()\n                .clickable { expanded = !expanded }\n                .padding(16.dp),\n            horizontalArrangement = Arrangement.SpaceBetween,\n            verticalAlignment = Alignment.CenterVertically\n        ) {\n            Text(\n                text = title,\n                fontWeight = FontWeight.Bold\n            )\n            Icon(\n                imageVector = if (expanded) Icons.Default.ExpandLess else Icons.Default.ExpandMore,\n                contentDescription = if (expanded) \"Collapse\" else \"Expand\"\n            )\n        }\n\n        // Content (children)\n        AnimatedVisibility(visible = expanded) {\n            Column(modifier = Modifier.padding(start = 16.dp, end = 16.dp, bottom = 16.dp)) {\n                // Render each child\n                param.children?.forEach { childWrapper -&gt;\n                    DynamicLayout(\n                        component = childWrapper.component,\n                        path = \"${param.path}-child-${childWrapper.hashCode()}\",\n                        parentScrollable = param.parentScrollable,\n                        onClickHandler = param.onClickHandler,\n                        bindValue = param.bindsValue\n                    )\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"02-setup/05a-custom-node/#path","title":"Path","text":"<p>The <code>path</code> parameter provides the component's position in the layout tree, which is useful for maintaining state and managing children:</p> <pre><code>// Use the path for uniqueness in keys or IDs\nval stateKey = \"${param.path}-expanded\"\nvar expanded by remember(stateKey) { mutableStateOf(isExpanded) }\n\n// Pass path to child components\nDynamicLayout(\n    component = childComponent,\n    path = \"${param.path}-child-$index\",\n    // Other parameters...\n)\n</code></pre>"},{"location":"02-setup/05a-custom-node/#parentscrollable","title":"ParentScrollable","text":"<p>The <code>parentScrollable</code> flag indicates if the parent component is scrollable, which helps avoid nested scrolling issues:</p> <pre><code>// Only make this component scrollable if the parent isn't\nval scrollModifier = if (!param.parentScrollable &amp;&amp; needsScrolling) {\n    Modifier.verticalScroll(rememberScrollState())\n} else {\n    Modifier\n}\n\nColumn(\n    modifier = param.modifier.then(scrollModifier)\n) {\n    // Component content\n}\n</code></pre>"},{"location":"02-setup/05a-custom-node/#onclickhandler","title":"OnClickHandler","text":"<p>The <code>onClickHandler</code> function allows your custom component to trigger click events that are handled by the parent:</p> <pre><code>CustomNodes.register(\"action_button\") { param -&gt;\n    val actionId = param.data[\"action_id\"] ?: \"default_action\"\n    val label = param.data[\"label\"] ?: \"Action\"\n\n    Button(\n        onClick = {\n            // Forward the action to the parent handler\n            param.onClickHandler(\"custom_action:$actionId\")\n        },\n        modifier = param.modifier\n    ) {\n        Text(label)\n    }\n}\n</code></pre>"},{"location":"02-setup/05a-custom-node/#bindsvalue","title":"BindsValue","text":"<p>The <code>bindsValue</code> parameter provides access to the current bound values, allowing your component to access dynamic data:</p> <pre><code>CustomNodes.register(\"user_greeting\") { param -&gt;\n    // Access a value from bindings\n    val username = param.bindsValue.getValue&lt;String&gt;(\n        LayoutComponent.Custom(\n            type = \"user_greeting\",\n            data = param.data,\n            modifier = null,\n            children = null\n        ),\n        \"username\"\n    ) ?: \"Guest\"\n\n    Text(\n        text = \"Welcome, $username!\",\n        style = MaterialTheme.typography.h5,\n        modifier = param.modifier\n    )\n}\n</code></pre>"},{"location":"02-setup/05a-custom-node/#using-custom-nodes-in-json","title":"Using Custom Nodes in JSON","text":"<p>Once registered, you can use your custom nodes in JSON layouts:</p> <pre><code>{\n  \"column\": {\n    \"children\": [\n      {\n        \"profile_card\": {\n          \"name\": \"John Doe\",\n          \"role\": \"Software Engineer\",\n          \"initials\": \"JD\",\n          \"level\": \"Senior\",\n          \"modifier\": {\n            \"base\": {\n              \"fillMaxWidth\": true,\n              \"padding\": {\n                \"all\": 8\n              },\n              \"clickId\": \"view_profile:john.doe\"\n            }\n          }\n        }\n      },\n      {\n        \"expandable_section\": {\n          \"title\": \"Recent Activity\",\n          \"expanded\": \"true\",\n          \"children\": [\n            {\n              \"text\": {\n                \"content\": \"Updated profile information\"\n              }\n            },\n            {\n              \"text\": {\n                \"content\": \"Completed project milestone\"\n              }\n            }\n          ]\n        }\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"02-setup/05a-custom-node/#real-world-examples","title":"Real-World Examples","text":"<p>Let's explore some practical custom components you might create:</p>"},{"location":"02-setup/05a-custom-node/#rating-component","title":"Rating Component","text":"<pre><code>CustomNodes.register(\"star_rating\") { param -&gt;\n    val rating = param.data[\"rating\"]?.toFloatOrNull() ?: 0f\n    val maxRating = param.data[\"max\"]?.toIntOrNull() ?: 5\n    val size = param.data[\"size\"]?.toIntOrNull() ?: 24\n    val color = param.data[\"color\"]?.let { ColorParser.parseColor(it) } ?: Color.Gold\n\n    Row(modifier = param.modifier) {\n        for (i in 1..maxRating) {\n            val filled = i &lt;= rating\n            val halfFilled = !filled &amp;&amp; i - 0.5f &lt;= rating\n\n            Icon(\n                imageVector = when {\n                    filled -&gt; Icons.Filled.Star\n                    halfFilled -&gt; Icons.Filled.StarHalf\n                    else -&gt; Icons.Filled.StarBorder\n                },\n                contentDescription = null,\n                tint = color,\n                modifier = Modifier.size(size.dp)\n            )\n        }\n    }\n}\n</code></pre> <p>Usage:</p> <pre><code>{\n  \"star_rating\": {\n    \"rating\": \"4.5\",\n    \"max\": \"5\",\n    \"size\": \"32\",\n    \"color\": \"#FFD700\"\n  }\n}\n</code></pre>"},{"location":"02-setup/05a-custom-node/#input-field","title":"Input Field","text":"<pre><code>CustomNodes.register(\"input_field\") { param -&gt;\n    val field = remember {\n        TextFieldState(\n            initialValue = param.data[\"value\"] ?: \"\",\n            label = param.data[\"label\"] ?: \"\",\n            placeholder = param.data[\"placeholder\"] ?: \"\",\n            isPassword = param.data[\"password\"]?.toBoolean() ?: false,\n            onChange = { newValue -&gt;\n                // Report changes to parent\n                val fieldId = param.data[\"id\"] ?: \"field\"\n                param.onClickHandler(\"field_change:$fieldId:$newValue\")\n            }\n        )\n    }\n\n    // Get any error message from bindings\n    val errorKey = param.data[\"error_key\"] ?: \"${param.data[\"id\"]}_error\"\n    val error = param.bindsValue.getValue&lt;String&gt;(\n        LayoutComponent.Custom(\n            type = \"input_field\",\n            data = param.data,\n            modifier = null,\n            children = null\n        ),\n        errorKey\n    ) ?: \"\"\n\n    Column(modifier = param.modifier) {\n        if (field.label.isNotEmpty()) {\n            Text(\n                text = field.label,\n                style = MaterialTheme.typography.caption,\n                modifier = Modifier.padding(bottom = 4.dp)\n            )\n        }\n\n        OutlinedTextField(\n            value = field.value,\n            onValueChange = {\n                field.value = it\n                field.onChange(it)\n            },\n            placeholder = {\n                if (field.placeholder.isNotEmpty()) {\n                    Text(field.placeholder)\n                }\n            },\n            visualTransformation = if (field.isPassword) {\n                PasswordVisualTransformation()\n            } else {\n                VisualTransformation.None\n            },\n            isError = error.isNotEmpty(),\n            modifier = Modifier.fillMaxWidth()\n        )\n\n        if (error.isNotEmpty()) {\n            Text(\n                text = error,\n                color = MaterialTheme.colors.error,\n                style = MaterialTheme.typography.caption,\n                modifier = Modifier.padding(top = 4.dp, start = 4.dp)\n            )\n        }\n    }\n}\n\n// Helper class for field state\nprivate class TextFieldState(\n    initialValue: String,\n    val label: String,\n    val placeholder: String,\n    val isPassword: Boolean,\n    val onChange: (String) -&gt; Unit\n) {\n    var value by mutableStateOf(initialValue)\n}\n</code></pre> <p>Usage:</p> <pre><code>{\n  \"input_field\": {\n    \"id\": \"email\",\n    \"label\": \"Email Address\",\n    \"placeholder\": \"Enter your email\",\n    \"value\": \"{email_value}\",\n    \"error_key\": \"email_error\"\n  }\n}\n</code></pre>"},{"location":"02-setup/05a-custom-node/#chart-component","title":"Chart Component","text":"<pre><code>CustomNodes.register(\"chart\") { param -&gt;\n    val chartType = param.data[\"type\"] ?: \"bar\"\n    val title = param.data[\"title\"] ?: \"\"\n    val dataKey = param.data[\"data_key\"] ?: \"chart_data\"\n    val height = param.data[\"height\"]?.toIntOrNull() ?: 200\n\n    // Get data from bindings\n    val chartData = param.bindsValue.getValue&lt;String&gt;(\n        LayoutComponent.Custom(\n            type = \"chart\",\n            data = param.data,\n            modifier = null,\n            children = null\n        ),\n        dataKey\n    ) ?: \"[]\"\n\n    // Parse data\n    val data = try {\n        Json.decodeFromString&lt;List&lt;ChartDataPoint&gt;&gt;(chartData)\n    } catch (e: Exception) {\n        emptyList()\n    }\n\n    Column(modifier = param.modifier) {\n        if (title.isNotEmpty()) {\n            Text(\n                text = title,\n                style = MaterialTheme.typography.h6,\n                modifier = Modifier.padding(bottom = 8.dp)\n            )\n        }\n\n        Box(\n            modifier = Modifier\n                .fillMaxWidth()\n                .height(height.dp)\n                .border(1.dp, Color.LightGray)\n        ) {\n            when (chartType.lowercase()) {\n                \"bar\" -&gt; BarChart(data)\n                \"line\" -&gt; LineChart(data)\n                \"pie\" -&gt; PieChart(data)\n                else -&gt; {\n                    Text(\n                        text = \"Unsupported chart type: $chartType\",\n                        modifier = Modifier.align(Alignment.Center)\n                    )\n                }\n            }\n        }\n    }\n}\n\n// Chart implementation components\n@Composable\nprivate fun BarChart(data: List&lt;ChartDataPoint&gt;) {\n    // Your bar chart implementation\n}\n\n@Composable\nprivate fun LineChart(data: List&lt;ChartDataPoint&gt;) {\n    // Your line chart implementation\n}\n\n@Composable\nprivate fun PieChart(data: List&lt;ChartDataPoint&gt;) {\n    // Your pie chart implementation\n}\n\n// Data class for chart data\n@Serializable\nprivate data class ChartDataPoint(\n    val label: String,\n    val value: Float,\n    val color: String? = null\n)\n</code></pre> <p>Usage:</p> <pre><code>{\n  \"chart\": {\n    \"type\": \"bar\",\n    \"title\": \"Monthly Sales\",\n    \"data_key\": \"sales_data\",\n    \"height\": \"300\"\n  }\n}\n</code></pre>"},{"location":"02-setup/05a-custom-node/#best-practices","title":"Best Practices","text":""},{"location":"02-setup/05a-custom-node/#1-use-descriptive-type-names","title":"1. Use Descriptive Type Names","text":"<p>Choose clear, descriptive names for your custom components:</p> <pre><code>// Good\nCustomNodes.register(\"profile_card\") { /* ... */ }\nCustomNodes.register(\"input_field\") { /* ... */ }\nCustomNodes.register(\"product_carousel\") { /* ... */ }\n\n// Avoid\nCustomNodes.register(\"card1\") { /* ... */ }\nCustomNodes.register(\"custom_input\") { /* ... */ }\nCustomNodes.register(\"carousel\") { /* ... */ }\n</code></pre>"},{"location":"02-setup/05a-custom-node/#2-always-provide-defaults","title":"2. Always Provide Defaults","text":"<p>Make your components robust by providing defaults for all properties:</p> <pre><code>val title = param.data[\"title\"] ?: \"Untitled\"\nval count = param.data[\"count\"]?.toIntOrNull() ?: 0\nval isEnabled = param.data[\"enabled\"]?.toBoolean() ?: true\nval color = param.data[\"color\"]?.let { ColorParser.parseColor(it) } ?: Color.Black\n</code></pre>"},{"location":"02-setup/05a-custom-node/#3-handle-type-conversions-safely","title":"3. Handle Type Conversions Safely","text":"<p>Always use safe conversions for non-string types:</p> <pre><code>// Safe integer conversion\nval size = param.data[\"size\"]?.toIntOrNull() ?: 16\n\n// Safe boolean conversion\nval isVisible = param.data[\"visible\"]?.toBoolean() ?: true\n\n// Safe float conversion\nval opacity = param.data[\"opacity\"]?.toFloatOrNull() ?: 1.0f\n\n// Safe color parsing\nval color = param.data[\"color\"]?.let {\n    try {\n        ColorParser.parseColor(it)\n    } catch (e: Exception) {\n        Color.Black // Fallback color\n    }\n} ?: Color.Black\n</code></pre>"},{"location":"02-setup/05a-custom-node/#4-document-your-components","title":"4. Document Your Components","text":"<p>Document your custom components for other developers:</p> <pre><code>/**\n * Rating Component\n *\n * Displays a star rating with customizable properties.\n *\n * Properties:\n * - rating: The rating value (0-5, supports half stars)\n * - max: Maximum number of stars (default: 5)\n * - size: Size of each star in dp (default: 24)\n * - color: Star color in hex format (default: gold)\n *\n * Example:\n * ```json\n * {\n *   \"star_rating\": {\n *     \"rating\": \"4.5\",\n *     \"max\": \"5\",\n *     \"size\": \"32\",\n *     \"color\": \"#FFD700\"\n *   }\n * }\n * ```\n\n*/\nCustomNodes.register(\"star_rating\") { param -&gt;\n// Implementation...\n}\n</code></pre>"},{"location":"02-setup/05a-custom-node/#5-keep-components-focused","title":"5. Keep Components Focused","text":"<p>Each custom component should have a single responsibility:</p> <pre><code>// Good: Focused component\nCustomNodes.register(\"price_display\") { param -&gt;\n    val price = param.data[\"price\"]?.toDoubleOrNull() ?: 0.0\n    val currency = param.data[\"currency\"] ?: \"$\"\n\n    // Render price with currency\n}\n\n// Avoid: Component doing too much\nCustomNodes.register(\"product_card\") { param -&gt;\n    // Handles image, title, price, description, rating, actions, etc.\n    // Too many responsibilities in one component\n}\n</code></pre>"},{"location":"02-setup/05a-custom-node/#6-reuse-built-in-components","title":"6. Reuse Built-in Components","text":"<p>Build on top of built-in components when possible:</p> <pre><code>CustomNodes.register(\"section_header\") { param -&gt;\n    val title = param.data[\"title\"] ?: \"\"\n    val subtitle = param.data[\"subtitle\"]\n\n    Column(modifier = param.modifier) {\n        Text(\n            text = title,\n            style = MaterialTheme.typography.h6\n        )\n        if (subtitle != null) {\n            Text(\n                text = subtitle,\n                style = MaterialTheme.typography.subtitle1,\n                color = Color.Gray\n            )\n        }\n        Divider(modifier = Modifier.padding(vertical = 8.dp))\n    }\n}\n</code></pre>"},{"location":"02-setup/05a-custom-node/#7-register-early-in-app-lifecycle","title":"7. Register Early in App Lifecycle","text":"<p>Register all your custom components during app initialization:</p> <pre><code>class MyApplication : Application() {\n    override fun onCreate() {\n        super.onCreate()\n\n        // Register all custom components\n        registerCustomComponents()\n    }\n\n    private fun registerCustomComponents() {\n        // UI components\n        CustomNodes.register(\"profile_card\") { /* ... */ }\n        CustomNodes.register(\"section_header\") { /* ... */ }\n\n        // Form components\n        CustomNodes.register(\"input_field\") { /* ... */ }\n        CustomNodes.register(\"dropdown\") { /* ... */ }\n\n        // Visualization components\n        CustomNodes.register(\"chart\") { /* ... */ }\n        CustomNodes.register(\"progress_indicator\") { /* ... */ }\n\n        // Special components\n        CustomNodes.register(\"map_view\") { /* ... */ }\n        CustomNodes.register(\"image_gallery\") { /* ... */ }\n    }\n}\n</code></pre>"},{"location":"02-setup/05a-custom-node/#troubleshooting","title":"Troubleshooting","text":""},{"location":"02-setup/05a-custom-node/#component-not-appearing","title":"Component Not Appearing","text":"<p>If your custom component doesn't appear:</p> <ol> <li>Verify the component type is registered correctly (check case sensitivity)</li> <li>Ensure the registration happens before the layout is rendered</li> <li>Check for exceptions in your component implementation</li> <li>Verify the JSON structure matches what your component expects</li> </ol>"},{"location":"02-setup/05a-custom-node/#data-not-being-passed-correctly","title":"Data Not Being Passed Correctly","text":"<p>If properties aren't being passed correctly:</p> <ol> <li>Check the JSON property names match what your code is looking for</li> <li>Ensure you're handling type conversions safely</li> <li>Verify your defaults are working as expected</li> </ol>"},{"location":"02-setup/05a-custom-node/#children-not-rendering","title":"Children Not Rendering","text":"<p>If child components aren't rendering:</p> <ol> <li>Check that you're correctly passing the children to DynamicLayout</li> <li>Ensure you're using the correct path for child components</li> <li>Verify the parent-child relationship in your JSON</li> </ol>"},{"location":"02-setup/05a-custom-node/#next-steps","title":"Next Steps","text":"<p>Now that you understand custom nodes, you can:</p> <ol> <li>Design a component system for your application</li> <li>Create reusable UI elements that match your design language</li> <li>Integrate third-party libraries with Compose Remote Layout</li> </ol>"},{"location":"03-json-structure/06-layout-json-structure/","title":"Understanding JSON Layout Structure","text":"<p>Compose Remote Layout uses a well-defined JSON structure to represent UI components. This guide provides a comprehensive reference for the JSON format and how it maps to Compose UI elements.</p>"},{"location":"03-json-structure/06-layout-json-structure/#json-structure-overview","title":"JSON Structure Overview","text":"<p>Every component in a Compose Remote Layout follows this basic pattern:</p> <pre><code>{\n  \"componentType\": {\n    \"modifier\": {\n      \"base\": {\n        // Base modifiers common to all components\n      }\n      // Component-specific modifiers\n    },\n    // Component-specific properties\n    \"children\": [\n      // Child components (for container components)\n    ]\n  }\n}\n</code></pre> <p>The root of any layout must be a single component, identified by the top-level key (like <code>\"column\"</code>, <code>\"row\"</code>, etc.).</p>"},{"location":"03-json-structure/06-layout-json-structure/#component-types-reference","title":"Component Types Reference","text":"<p>Compose Remote Layout supports the following built-in component types:</p>"},{"location":"03-json-structure/06-layout-json-structure/#container-components","title":"Container Components","text":"<p>These components can contain other components as children.</p>"},{"location":"03-json-structure/06-layout-json-structure/#column","title":"Column","text":"<p>Creates a vertical arrangement of children elements, similar to Compose's <code>Column</code>.</p> <pre><code>{\n  \"column\": {\n    \"modifier\": {\n      \"base\": {\n        \"fillMaxWidth\": true,\n        \"padding\": {\n          \"all\": 16\n        }\n      },\n      \"verticalArrangement\": \"spaceBetween\",\n      \"horizontalAlignment\": \"center\"\n    },\n    \"children\": [\n      // Child components\n    ]\n  }\n}\n</code></pre> <p>Specific Modifiers:</p> <ul> <li><code>verticalArrangement</code>: Controls spacing of children (<code>\"top\"</code>, <code>\"center\"</code>, <code>\"bottom\"</code>,   <code>\"spaceBetween\"</code>, <code>\"spaceAround\"</code>, <code>\"spaceEvenly\"</code>)</li> <li><code>horizontalAlignment</code>: Aligns children horizontally (<code>\"start\"</code>, <code>\"center\"</code>, <code>\"end\"</code>)</li> </ul>"},{"location":"03-json-structure/06-layout-json-structure/#row","title":"Row","text":"<p>Creates a horizontal arrangement of children elements, similar to Compose's <code>Row</code>.</p> <pre><code>{\n  \"row\": {\n    \"modifier\": {\n      \"base\": {\n        \"fillMaxWidth\": true\n      },\n      \"horizontalArrangement\": \"spaceBetween\",\n      \"verticalAlignment\": \"center\"\n    },\n    \"children\": [\n      // Child components\n    ]\n  }\n}\n</code></pre> <p>Specific Modifiers:</p> <ul> <li><code>horizontalArrangement</code>: Controls spacing of children (<code>\"start\"</code>, <code>\"center\"</code>, <code>\"end\"</code>,   <code>\"spaceBetween\"</code>, <code>\"spaceAround\"</code>, <code>\"spaceEvenly\"</code>)</li> <li><code>verticalAlignment</code>: Aligns children vertically (<code>\"top\"</code>, <code>\"center\"</code>, <code>\"bottom\"</code>)</li> </ul>"},{"location":"03-json-structure/06-layout-json-structure/#box","title":"Box","text":"<p>Overlays children on top of each other, similar to Compose's <code>Box</code>.</p> <pre><code>{\n  \"box\": {\n    \"modifier\": {\n      \"base\": {\n        \"size\": 200\n      },\n      \"contentAlignment\": \"center\"\n    },\n    \"children\": [\n      // Child components - first child at the bottom, last child on top\n    ]\n  }\n}\n</code></pre> <p>Specific Modifiers:</p> <ul> <li><code>contentAlignment</code>: Positions children within the box (<code>\"center\"</code>, <code>\"topStart\"</code>, <code>\"topCenter\"</code>,   <code>\"topEnd\"</code>, <code>\"centerStart\"</code>, <code>\"centerEnd\"</code>, <code>\"bottomStart\"</code>, <code>\"bottomCenter\"</code>, <code>\"bottomEnd\"</code>)</li> </ul>"},{"location":"03-json-structure/06-layout-json-structure/#grid","title":"Grid","text":"<p>Arranges children in a grid pattern.</p> <pre><code>{\n  \"grid\": {\n    \"modifier\": {\n      \"base\": {\n        \"fillMaxWidth\": true,\n        \"scrollable\": true\n      },\n      \"columns\": 3,\n      \"rows\": 2,\n      \"orientation\": \"vertical\",\n      \"horizontalArrangement\": \"spaceBetween\",\n      \"verticalArrangement\": \"center\",\n      \"enableSnapHorizontal\": false\n    },\n    \"children\": [\n      // Child components\n    ]\n  }\n}\n</code></pre> <p>Specific Modifiers:</p> <ul> <li><code>columns</code>: Number of columns (for vertical orientation)</li> <li><code>rows</code>: Number of rows (for horizontal orientation)</li> <li><code>orientation</code>: Direction of the grid (<code>\"vertical\"</code> or <code>\"horizontal\"</code>)</li> <li><code>horizontalArrangement</code>: Controls horizontal spacing</li> <li><code>verticalArrangement</code>: Controls vertical spacing</li> <li><code>enableSnapHorizontal</code>: Enables snap scrolling for horizontal grids</li> </ul>"},{"location":"03-json-structure/06-layout-json-structure/#card","title":"Card","text":"<p>Creates a Material Design card that can contain children.</p> <pre><code>{\n  \"card\": {\n    \"modifier\": {\n      \"base\": {\n        \"padding\": {\n          \"all\": 16\n        }\n      }\n    },\n    \"children\": [\n      // Child components\n    ]\n  }\n}\n</code></pre>"},{"location":"03-json-structure/06-layout-json-structure/#content-components","title":"Content Components","text":"<p>These components typically display content rather than containing other components.</p>"},{"location":"03-json-structure/06-layout-json-structure/#text","title":"Text","text":"<p>Displays text content with various styling options.</p> <pre><code>{\n  \"text\": {\n    \"content\": \"Hello World\",\n    \"fontSize\": 16,\n    \"fontWeight\": \"bold\",\n    \"color\": \"#0066CC\",\n    \"textAlign\": \"center\",\n    \"fontStyle\": \"normal\",\n    \"letterSpacing\": 0,\n    \"lineHeight\": 20,\n    \"maxLines\": 2,\n    \"minLines\": 1,\n    \"overflow\": \"ellipsis\",\n    \"textDecoration\": \"underline\"\n  }\n}\n</code></pre> <p>Properties:</p> <ul> <li><code>content</code>: The text to display (supports bind values with <code>{key}</code> syntax)</li> <li><code>fontSize</code>: Font size in sp</li> <li><code>fontWeight</code>: Font weight (<code>\"thin\"</code>, <code>\"extralight\"</code>, <code>\"light\"</code>, <code>\"normal\"</code>, <code>\"medium\"</code>,   <code>\"semibold\"</code>, <code>\"bold\"</code>, <code>\"extrabold\"</code>, <code>\"black\"</code>, or numeric weights like <code>\"w100\"</code> through   <code>\"w900\"</code>)</li> <li><code>color</code>: Text color as a hex string</li> <li><code>textAlign</code>: Text alignment (<code>\"start\"</code>, <code>\"center\"</code>, <code>\"end\"</code>, <code>\"justify\"</code>)</li> <li><code>fontStyle</code>: Font style (<code>\"normal\"</code>, <code>\"italic\"</code>)</li> <li><code>letterSpacing</code>: Additional space between letters in sp</li> <li><code>lineHeight</code>: Line height in sp</li> <li><code>maxLines</code>: Maximum number of lines before truncation</li> <li><code>minLines</code>: Minimum number of lines (adds space if content is shorter)</li> <li><code>overflow</code>: How to handle text overflow (<code>\"clip\"</code>, <code>\"ellipsis\"</code>, <code>\"visible\"</code>)</li> <li><code>textDecoration</code>: Text decoration (<code>\"none\"</code>, <code>\"underline\"</code>, <code>\"linethrough\"</code>,   <code>\"underline linethrough\"</code>)</li> </ul>"},{"location":"03-json-structure/06-layout-json-structure/#button","title":"Button","text":"<p>Creates an interactive button element.</p> <pre><code>{\n  \"button\": {\n    \"content\": \"Click Me\",\n    \"clickId\": \"primary_button\",\n    \"fontSize\": 14,\n    \"fontWeight\": \"medium\",\n    \"fontColor\": \"#FFFFFF\"\n  }\n}\n</code></pre> <p>Properties:</p> <ul> <li><code>content</code>: The button text (supports bind values)</li> <li><code>clickId</code>: Identifier for click handling</li> <li><code>fontSize</code>, <code>fontWeight</code>, <code>fontColor</code>: Text styling properties</li> <li><code>letterSpacing</code>, <code>lineHeight</code>, <code>textAlign</code>, <code>textDecoration</code>, <code>maxLines</code>, <code>minLines</code>, <code>overflow</code>:   Additional text styling properties</li> </ul> <p>Buttons can also contain complex content using <code>children</code> instead of <code>content</code>:</p> <pre><code>{\n  \"button\": {\n    \"clickId\": \"complex_button\",\n    \"children\": [\n      {\n        \"row\": {\n          \"children\": [\n            {\n              \"text\": {\n                \"content\": \"Submit\"\n              }\n            }\n          ]\n        }\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"03-json-structure/06-layout-json-structure/#spacer","title":"Spacer","text":"<p>Creates empty space with specified dimensions.</p> <pre><code>{\n  \"spacer\": {\n    \"height\": 16,\n    \"width\": 0\n  }\n}\n</code></pre> <p>Properties:</p> <ul> <li><code>height</code>: Vertical space in dp</li> <li><code>width</code>: Horizontal space in dp</li> </ul>"},{"location":"03-json-structure/06-layout-json-structure/#custom-components","title":"Custom Components","text":"<p>You can also use custom components that you've registered with <code>CustomNodes</code>:</p> <pre><code>{\n  \"profile_card\": {\n    \"username\": \"John Doe\",\n    \"avatar_url\": \"https://example.com/avatar.jpg\",\n    \"modifier\": {\n      \"base\": {\n        \"fillMaxWidth\": true\n      }\n    },\n    \"children\": [\n      // Optional children depending on your custom component implementation\n    ]\n  }\n}\n</code></pre> <p>The properties available for custom components depend on your implementation.</p>"},{"location":"03-json-structure/06-layout-json-structure/#modifier-system","title":"Modifier System","text":"<p>The modifier system allows you to customize appearance and behavior of components.</p>"},{"location":"03-json-structure/06-layout-json-structure/#base-modifiers","title":"Base Modifiers","text":"<p>These modifiers are common to all components:</p>"},{"location":"03-json-structure/06-layout-json-structure/#size-modifiers","title":"Size Modifiers","text":"<pre><code>\"base\": {\n    \"width\": 200, // Fixed width in dp\n    \"height\": 100, // Fixed height in dp\n    \"size\": 150, // Both width and height set to the same value\n\n    \"fillMaxWidth\": true, // Fill available width (equivalent to Modifier.fillMaxWidth())\n    \"fillMaxHeight\": false, // Fill available height\n    \"fillMaxSize\": false, // Fill available width and height\n\n    \"wrapContentWidth\": true, // Size to fit content horizontally\n    \"wrapContentHeight\": true, // Size to fit content vertically\n\n    \"aspectRatio\": 1.5      // Maintain this width to height ratio\n}\n</code></pre>"},{"location":"03-json-structure/06-layout-json-structure/#padding-and-margin","title":"Padding and Margin","text":"<pre><code>\"padding\": {\n    \"all\": 16, // Apply 16dp padding on all sides\n    \"horizontal\": 16, // Left and right padding\n    \"vertical\": 8, // Top and bottom padding\n    \"start\": 16, // Start (left in LTR) padding\n    \"top\": 8, // Top padding\n    \"end\": 16, // End (right in LTR) padding\n    \"bottom\": 8            // Bottom padding\n},\n\n\"margin\": {\n    // Same properties as padding\n    \"all\": 8,\n    \"horizontal\": 8,\n    \"vertical\": 4,\n    \"start\": 8,\n    \"top\": 4,\n    \"end\": 8,\n    \"bottom\": 4\n}\n</code></pre>"},{"location":"03-json-structure/06-layout-json-structure/#background-and-styling","title":"Background and Styling","text":"<pre><code>\"background\": {\n    \"color\": \"#FF0000\", // Background color as hex\n    \"alpha\": 0.8, // Opacity (0.0 - 1.0)\n    \"shape\": \"roundedcorner\", // Shape type (\"rectangle\", \"roundedcorner\", \"circle\")\n    \"radius\": 8               // Corner radius for rounded corners\n},\n\"border\": {\n    \"width\": 2, // Border width in dp\n    \"color\": \"#000000\", // Border color as hex\n    \"shape\": {\n        \"type\": \"roundedcorner\",\n        \"cornerRadius\": 8,   // Even corner radius\n        \"topStart\": 8, // Individual corner radii\n        \"topEnd\": 8,\n        \"bottomStart\": 8,\n        \"bottomEnd\": 8\n    }\n},\n\"shadow\": {\n    \"elevation\": 4, // Shadow elevation in dp\n    \"shape\": {\n      \"type\": \"roundedcorner\",\n      \"cornerRadius\": 8\n    }\n}\n</code></pre>"},{"location":"03-json-structure/06-layout-json-structure/#scrolling","title":"Scrolling","text":"<pre><code>\"scrollable\": true  // Make this component scrollable\n</code></pre>"},{"location":"03-json-structure/06-layout-json-structure/#interaction","title":"Interaction","text":"<pre><code>\"clickId\": \"component_click\"  // Component will be clickable with this ID\n</code></pre>"},{"location":"03-json-structure/06-layout-json-structure/#transformations","title":"Transformations","text":"<pre><code>\"alpha\": 0.9, // Component opacity (0.0 - 1.0)\n\"rotate\": 45, // Rotation in degrees\n\"scale\": {\n    \"scaleX\": 1.2, // Horizontal scale factor\n    \"scaleY\": 0.8         // Vertical scale factor\n},\n\"offset\": {\n    \"x\": 10, // Horizontal offset in dp\n    \"y\": 5                // Vertical offset in dp\n},\n\"clip\": true            // Clip content to component bounds\n</code></pre>"},{"location":"03-json-structure/06-layout-json-structure/#complete-examples","title":"Complete Examples","text":""},{"location":"03-json-structure/06-layout-json-structure/#simple-profile-card","title":"Simple Profile Card","text":"<p>Here's an example of a simple profile card:</p> <pre><code>{\n  \"card\": {\n    \"modifier\": {\n      \"base\": {\n        \"fillMaxWidth\": true,\n        \"padding\": {\n          \"all\": 16\n        },\n        \"clickId\": \"view_profile\"\n      }\n    },\n    \"children\": [\n      {\n        \"row\": {\n          \"modifier\": {\n            \"verticalAlignment\": \"center\"\n          },\n          \"children\": [\n            {\n              \"box\": {\n                \"modifier\": {\n                  \"base\": {\n                    \"size\": 64,\n                    \"background\": {\n                      \"color\": \"#EEEEEE\",\n                      \"shape\": \"circle\"\n                    }\n                  },\n                  \"contentAlignment\": \"center\"\n                },\n                \"children\": [\n                  {\n                    \"text\": {\n                      \"content\": \"{initials}\",\n                      \"fontSize\": 24,\n                      \"fontWeight\": \"bold\",\n                      \"color\": \"#666666\"\n                    }\n                  }\n                ]\n              }\n            },\n            {\n              \"spacer\": {\n                \"width\": 16,\n                \"height\": 0\n              }\n            },\n            {\n              \"column\": {\n                \"children\": [\n                  {\n                    \"text\": {\n                      \"content\": \"{username}\",\n                      \"fontSize\": 18,\n                      \"fontWeight\": \"bold\"\n                    }\n                  },\n                  {\n                    \"text\": {\n                      \"content\": \"{email}\",\n                      \"fontSize\": 14,\n                      \"color\": \"#666666\"\n                    }\n                  }\n                ]\n              }\n            }\n          ]\n        }\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"03-json-structure/06-layout-json-structure/#interactive-counter","title":"Interactive Counter","text":"<pre><code>{\n  \"column\": {\n    \"modifier\": {\n      \"base\": {\n        \"fillMaxWidth\": true,\n        \"padding\": {\n          \"all\": 24\n        }\n      },\n      \"horizontalAlignment\": \"center\",\n      \"verticalArrangement\": \"spaceBetween\"\n    },\n    \"children\": [\n      {\n        \"text\": {\n          \"content\": \"Counter\",\n          \"fontSize\": 24,\n          \"fontWeight\": \"bold\"\n        }\n      },\n      {\n        \"box\": {\n          \"modifier\": {\n            \"base\": {\n              \"padding\": {\n                \"vertical\": 32\n              }\n            },\n            \"contentAlignment\": \"center\"\n          },\n          \"children\": [\n            {\n              \"text\": {\n                \"content\": \"{count}\",\n                \"fontSize\": 64,\n                \"fontWeight\": \"bold\",\n                \"color\": \"{countColor}\"\n              }\n            }\n          ]\n        }\n      },\n      {\n        \"row\": {\n          \"modifier\": {\n            \"base\": {\n              \"fillMaxWidth\": true\n            },\n            \"horizontalArrangement\": \"spaceEvenly\"\n          },\n          \"children\": [\n            {\n              \"button\": {\n                \"content\": \"-\",\n                \"clickId\": \"decrement\",\n                \"fontSize\": 20\n              }\n            },\n            {\n              \"button\": {\n                \"content\": \"+\",\n                \"clickId\": \"increment\",\n                \"fontSize\": 20\n              }\n            }\n          ]\n        }\n      },\n      {\n        \"button\": {\n          \"content\": \"Reset\",\n          \"clickId\": \"reset\",\n          \"modifier\": {\n            \"base\": {\n              \"fillMaxWidth\": true,\n              \"padding\": {\n                \"vertical\": 8\n              }\n            }\n          }\n        }\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"03-json-structure/06-layout-json-structure/#scrollable-grid-layout","title":"Scrollable Grid Layout","text":"<pre><code>{\n  \"column\": {\n    \"modifier\": {\n      \"base\": {\n        \"fillMaxWidth\": true,\n        \"padding\": {\n          \"all\": 16\n        }\n      }\n    },\n    \"children\": [\n      {\n        \"text\": {\n          \"content\": \"Product Categories\",\n          \"fontSize\": 24,\n          \"fontWeight\": \"bold\"\n        }\n      },\n      {\n        \"spacer\": {\n          \"height\": 16\n        }\n      },\n      {\n        \"grid\": {\n          \"modifier\": {\n            \"base\": {\n              \"fillMaxWidth\": true,\n              \"scrollable\": true,\n              \"height\": 120\n            },\n            \"orientation\": \"horizontal\",\n            \"rows\": 1,\n            \"enableSnapHorizontal\": true,\n            \"horizontalArrangement\": \"spaceBetween\"\n          },\n          \"children\": [\n            {\n              \"card\": {\n                \"modifier\": {\n                  \"base\": {\n                    \"width\": 180,\n                    \"height\": 100,\n                    \"clickId\": \"category:electronics\"\n                  }\n                },\n                \"children\": [\n                  {\n                    \"box\": {\n                      \"modifier\": {\n                        \"contentAlignment\": \"center\"\n                      },\n                      \"children\": [\n                        {\n                          \"text\": {\n                            \"content\": \"Electronics\",\n                            \"fontSize\": 18,\n                            \"fontWeight\": \"medium\"\n                          }\n                        }\n                      ]\n                    }\n                  }\n                ]\n              }\n            },\n            {\n              \"card\": {\n                \"modifier\": {\n                  \"base\": {\n                    \"width\": 180,\n                    \"height\": 100,\n                    \"clickId\": \"category:clothing\"\n                  }\n                },\n                \"children\": [\n                  {\n                    \"box\": {\n                      \"modifier\": {\n                        \"contentAlignment\": \"center\"\n                      },\n                      \"children\": [\n                        {\n                          \"text\": {\n                            \"content\": \"Clothing\",\n                            \"fontSize\": 18,\n                            \"fontWeight\": \"medium\"\n                          }\n                        }\n                      ]\n                    }\n                  }\n                ]\n              }\n            },\n            {\n              \"card\": {\n                \"modifier\": {\n                  \"base\": {\n                    \"width\": 180,\n                    \"height\": 100,\n                    \"clickId\": \"category:home\"\n                  }\n                },\n                \"children\": [\n                  {\n                    \"box\": {\n                      \"modifier\": {\n                        \"contentAlignment\": \"center\"\n                      },\n                      \"children\": [\n                        {\n                          \"text\": {\n                            \"content\": \"Home\",\n                            \"fontSize\": 18,\n                            \"fontWeight\": \"medium\"\n                          }\n                        }\n                      ]\n                    }\n                  }\n                ]\n              }\n            }\n          ]\n        }\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"03-json-structure/06-layout-json-structure/#best-practices","title":"Best Practices","text":""},{"location":"03-json-structure/06-layout-json-structure/#1-keep-layout-json-clean-and-readable","title":"1. Keep Layout JSON Clean and Readable","text":"<ul> <li>Use consistent indentation</li> <li>Group related components together</li> <li>Add comments in your code when generating JSON</li> <li>Consider using a JSON formatter for better readability</li> </ul>"},{"location":"03-json-structure/06-layout-json-structure/#2-start-simple-and-build-up-complexity","title":"2. Start Simple and Build Up Complexity","text":"<ul> <li>Begin with simple layouts</li> <li>Test each component individually</li> <li>Gradually combine components into more complex layouts</li> <li>Validate layout rendering at each step</li> </ul>"},{"location":"03-json-structure/06-layout-json-structure/#3-reuse-common-structures","title":"3. Reuse Common Structures","text":"<ul> <li>Identify repeating patterns</li> <li>Extract common layouts into reusable functions</li> <li>Use template systems if generating JSON dynamically</li> </ul>"},{"location":"03-json-structure/06-layout-json-structure/#4-consider-performance","title":"4. Consider Performance","text":"<ul> <li>Avoid deeply nested structures when possible</li> <li>Be mindful of the number of components in scrollable containers</li> <li>Use lazy loading patterns for large lists (custom components with LazyColumn)</li> </ul>"},{"location":"03-json-structure/06-layout-json-structure/#5-test-on-multiple-devices","title":"5. Test on Multiple Devices","text":"<ul> <li>Verify layouts on different screen sizes</li> <li>Ensure your responsive design works as expected</li> <li>Check behavior with different font sizes (accessibility)</li> </ul>"},{"location":"03-json-structure/06-layout-json-structure/#troubleshooting-common-issues","title":"Troubleshooting Common Issues","text":""},{"location":"03-json-structure/06-layout-json-structure/#problem-component-not-displaying","title":"Problem: Component Not Displaying","text":"<p>Possible causes:</p> <ul> <li>Invalid JSON structure</li> <li>Missing required properties</li> <li>Nested structure too complex</li> </ul> <p>Solutions:</p> <ul> <li>Validate JSON with a JSON validator</li> <li>Start with a simpler version and add complexity gradually</li> <li>Check for typos in component type names</li> </ul>"},{"location":"03-json-structure/06-layout-json-structure/#problem-layout-not-responding-to-clicks","title":"Problem: Layout Not Responding to Clicks","text":"<p>Possible causes:</p> <ul> <li>Missing <code>clickId</code> property</li> <li>Incorrect handler implementation</li> </ul> <p>Solutions:</p> <ul> <li>Ensure buttons have the <code>clickId</code> property set</li> <li>For non-button components, add <code>clickId</code> to the base modifier</li> <li>Verify click handler function is implemented correctly</li> </ul>"},{"location":"03-json-structure/06-layout-json-structure/#problem-unexpected-layout-appearance","title":"Problem: Unexpected Layout Appearance","text":"<p>Possible causes:</p> <ul> <li>Conflicting modifiers</li> <li>Incorrect nesting of components</li> <li>Misunderstanding of component behavior</li> </ul> <p>Solutions:</p> <ul> <li>Test individual components separately</li> <li>Review the documentation for specific components</li> <li>Use simpler alternatives if a component behaves unexpectedly</li> </ul>"},{"location":"03-json-structure/06-layout-json-structure/#next-steps","title":"Next Steps","text":"<p>Now that you understand the JSON structure for layouts, you can:</p> <ol> <li>Try the Live Editor JSON for build and create your dynamic content</li> </ol>"},{"location":"03-json-structure/07-live-editor/","title":"Live editor","text":"<p>TODO: Live editor</p> <p>You can explore the code of the live editor here</p> <p>Run the live editor locally by following the steps below:</p> <pre><code>./gradlew :jsonBuilderWeb:wasmJsBrowserRun\n</code></pre>"},{"location":"04-router/08-router-overview/","title":"Router Overview","text":""},{"location":"04-router/08-router-overview/#introduction","title":"Introduction","text":"<p>Compose Remote Layout Router is a powerful navigation system designed specifically for Compose Remote Layout. It enables developers to create flexible, updateable applications where both the UI components and navigation flow can be controlled remotely from a server without requiring app updates.</p>"},{"location":"04-router/08-router-overview/#key-features","title":"Key Features","text":""},{"location":"04-router/08-router-overview/#navigation-stack-management","title":"Navigation Stack Management","text":"<p>The router maintains a comprehensive history stack of screens, enabling:</p> <ul> <li>Forward navigation to new screens</li> <li>Backward navigation to previously visited screens</li> <li>Deep linking to specific screens</li> <li>Complete control over the navigation history</li> </ul>"},{"location":"04-router/08-router-overview/#remote-layout-fetching","title":"Remote Layout Fetching","text":"<ul> <li>Automatically retrieves layout JSON from remote endpoints when navigating to new screens</li> <li>Handles network requests and error states gracefully</li> <li>Supports various data formats optimized for UI rendering</li> <li>Integrates with Ktor for efficient network communication</li> </ul>"},{"location":"04-router/08-router-overview/#transition-animations","title":"Transition Animations","text":"<ul> <li>Provides smooth, customizable transitions between screens</li> <li>Supports multiple animation types (fade, slide, etc.)</li> <li>Allows different transition types for different navigation actions (push, pop, replace)</li> <li>Configurable animation durations and easing functions</li> </ul>"},{"location":"04-router/08-router-overview/#caching-system","title":"Caching System","text":"<ul> <li>Built-in intelligent caching for layouts to improve performance</li> <li>Configurable cache size and time-to-live (TTL) settings</li> <li>Support for offline usage through cached layouts</li> <li>Memory-efficient implementation with LRU (Least Recently Used) eviction policy</li> </ul>"},{"location":"04-router/08-router-overview/#click-based-navigation","title":"Click-Based Navigation","text":"<ul> <li>Enables navigation directly from JSON layouts using special clickId prefixes</li> <li>Supports common navigation patterns: push, pop, replace, home, and reload</li> <li>Simplifies navigation implementation in server-defined layouts</li> <li>Consistent navigation behavior across the entire application</li> </ul>"},{"location":"04-router/08-router-overview/#core-components","title":"Core Components","text":"<p>The router system consists of several key components that work together:</p>"},{"location":"04-router/08-router-overview/#remoterouter","title":"RemoteRouter","text":"<p>An interface that manages navigation state and handles navigation actions:</p> <pre><code>interface RemoteRouter {\n    val baseUrl: String\n    val urlStack: MutableList&lt;String&gt;\n    val currentUrl: StateFlow&lt;String&gt;\n    val previousUrl: StateFlow&lt;String?&gt;\n    // Additional properties\n\n    fun pushPath(path: String)\n    fun popPath(): Boolean\n    fun replacePath(path: String)\n    fun clearHistory()\n    fun reload()\n}\n</code></pre> <p>The RemoteRouter:</p> <ul> <li>Maintains the URL stack for navigation history</li> <li>Provides methods for standard navigation actions (push, pop, replace)</li> <li>Exposes state flows for the current and previous URLs</li> <li>Tracks navigation status (isRoot, etc.)</li> </ul>"},{"location":"04-router/08-router-overview/#composeremoterouter","title":"ComposeRemoteRouter","text":"<p>A Composable function that integrates with the UI and renders the current screen:</p> <pre><code>@Composable\nfun ComposeRemoteRouter(\n    initialPath: String,\n    router: RemoteRouter,\n    // Additional parameters\n    onRenderEvent: @Composable (RenderEvent) -&gt; Unit,\n)\n</code></pre> <p>The ComposeRemoteRouter:</p> <ul> <li>Connects RemoteRouter state to the UI</li> <li>Handles screen transitions with animations</li> <li>Provides callbacks for navigation events</li> <li>Renders the appropriate UI based on loading/success/error states</li> </ul>"},{"location":"04-router/08-router-overview/#layoutfetcher","title":"LayoutFetcher","text":"<p>An interface for retrieving layout JSON from various sources:</p> <pre><code>interface LayoutFetcher {\n    suspend fun fetchLayout(url: String): Result&lt;String&gt;\n    fun fetchLayoutAsFlow(url: String): Flow&lt;ResultLayout&lt;String&gt;&gt;\n}\n</code></pre> <p>The LayoutFetcher:</p> <ul> <li>Defines methods for synchronous and asynchronous layout retrieval</li> <li>Supports different backend implementations (HTTP, local, etc.)</li> <li>Handles loading states and errors consistently</li> <li>Can be extended with caching capabilities</li> </ul>"},{"location":"04-router/08-router-overview/#navigationeventcontainer","title":"NavigationEventContainer","text":"<p>A container for navigation events that can be triggered from anywhere in the app:</p> <pre><code>class NavigationEventContainer {\n    val event: StateFlow&lt;NavigationEvent?&gt;\n\n    fun push(path: String)\n    fun replace(path: String)\n    fun home(path: String)\n    fun pop()\n    fun reload()\n}\n</code></pre> <p>The NavigationEventContainer:</p> <ul> <li>Provides methods to trigger navigation (push, pop, replace, etc.)</li> <li>Centralizes navigation event handling</li> <li>Simplifies navigation from non-Composable contexts</li> <li>Integrates seamlessly with ComposeRemoteRouter</li> </ul>"},{"location":"04-router/08-router-overview/#renderevent","title":"RenderEvent","text":"<p>Represents different states of the rendering process:</p> <pre><code>sealed class RenderEvent {\n    data class RenderedLayout(/*...*/) : RenderEvent()\n    data class Loading(val path: String) : RenderEvent()\n    data class Failure(val error: Throwable, val path: String) : RenderEvent()\n}\n</code></pre> <p>The RenderEvent system:</p> <ul> <li>Loading: When a layout is being fetched</li> <li>Success: When a layout has been successfully fetched and parsed</li> <li>Failure: When an error occurs during fetching or parsing</li> </ul>"},{"location":"04-router/08-router-overview/#when-to-use-router","title":"When to Use Router","text":"<p>The Compose Remote Layout Router is especially useful for:</p> <ul> <li> <p>Apps requiring frequent UI updates without deploying new versions</p> <ul> <li>Marketing campaigns, seasonal themes, promotions</li> <li>Feature rollouts and A/B testing</li> <li>Content-driven applications</li> </ul> </li> <li> <p>A/B testing different screen flows without app store submissions</p> <ul> <li>Test multiple user journeys simultaneously</li> <li>Quickly iterate on conversion funnels</li> <li>Measure performance of different navigation patterns</li> </ul> </li> <li> <p>Personalized user journeys based on user preferences or behavior</p> <ul> <li>Customized onboarding flows</li> <li>User-specific features and screens</li> <li>Context-aware navigation</li> </ul> </li> <li> <p>Complex navigation patterns that need to be modified remotely</p> <ul> <li>Multi-step forms</li> <li>Checkout processes</li> <li>Configuration wizards</li> </ul> </li> <li> <p>Multi-step flows like onboarding, checkout processes, or forms</p> <ul> <li>Control the exact sequence of screens</li> <li>Add/remove steps based on server logic</li> <li>Update guidance and help screens remotely</li> </ul> </li> </ul>"},{"location":"04-router/08-router-overview/#architecture-benefits","title":"Architecture Benefits","text":"<p>Using the router offers several architectural advantages:</p> <ol> <li> <p>Separation of Concerns:</p> <ul> <li>Navigation logic is decoupled from UI rendering</li> <li>Clean architecture with clear responsibilities</li> <li>Easier testing and maintenance</li> </ul> </li> <li> <p>Consistent Navigation Pattern:</p> <ul> <li>Standard approach for all screen transitions</li> <li>Predictable user experience</li> <li>Simplified navigation implementation</li> </ul> </li> <li> <p>Server-Driven Navigation:</p> <ul> <li>Navigation flow can be updated without app changes</li> <li>Coordinated UI and navigation updates</li> <li>Centralized control over user journeys</li> </ul> </li> <li> <p>Performance Optimization:</p> <ul> <li>Built-in caching and prefetching capabilities</li> <li>Reduced network requests through intelligent caching</li> <li>Optimized memory usage</li> </ul> </li> <li> <p>Better User Experience:</p> <ul> <li>Smooth transitions between screens</li> <li>Offline support through caching</li> <li>Faster loading times for previously visited screens</li> </ul> </li> </ol>"},{"location":"04-router/08-router-overview/#integration-with-compose-remote-layout","title":"Integration with Compose Remote Layout","text":"<p>Compose Remote Layout Router seamlessly integrates with the core Compose Remote Layout library, allowing:</p> <ul> <li>Dynamic layouts to be loaded and displayed</li> <li>Binding values to be passed to layouts</li> <li>Click events to be handled both for UI interaction and navigation</li> <li>Complete server-driven experiences from simple screens to complex flows</li> </ul>"},{"location":"04-router/08-router-overview/#getting-started","title":"Getting Started","text":"<p>To start using the Compose Remote Layout Router, continue with the Installation and Basic Usage guide.</p>"},{"location":"04-router/09-router-installation-and-basic-usage/","title":"Installation and Basic Usage","text":"<p>This guide covers adding the Compose Remote Layout Router to your project and setting up the basic requirements.</p>"},{"location":"04-router/09-router-installation-and-basic-usage/#adding-dependencies","title":"Adding Dependencies","text":"<p>Add the router dependency to your project's <code>build.gradle.kts</code> file:</p> <pre><code>dependencies {\n    // Core library (required)\n    implementation(\"io.github.utsmannn:compose-remote-layout:$version\")\n\n    // Router module\n    implementation(\"io.github.utsmannn:compose-remote-layout-router:$version\")\n\n    // Platform-specific implementations\n    implementation(\"io.github.utsmannn:compose-remote-layout-android:$version\") // For Android\n    // OR\n    implementation(\"io.github.utsmannn:compose-remote-layout-jvm:$version\") // For Desktop\n    // OR\n    implementation(\"io.github.utsmannn:compose-remote-layout-js:$version\") // For Web\n    // OR iOS implementations\n    implementation(\"io.github.utsmannn:compose-remote-layout-iosx64:$version\")\n    implementation(\"io.github.utsmannn:compose-remote-layout-iosarm64:$version\")\n}\n</code></pre> <p>Replace <code>$version</code> with the latest version number. You can find the current version on Maven Central.</p>"},{"location":"04-router/09-router-installation-and-basic-usage/#basic-setup-requirements","title":"Basic Setup Requirements","text":"<p>To use the router, you'll need:</p> <ol> <li>A CoroutineScope for asynchronous operations</li> <li>A LayoutFetcher to retrieve layouts</li> <li>A RemoteRouter instance to manage navigation</li> </ol>"},{"location":"04-router/09-router-installation-and-basic-usage/#minimal-implementation","title":"Minimal Implementation","text":"<p>Here's a minimal example to get started:</p> <pre><code>import androidx.compose.runtime.Composable\nimport androidx.compose.runtime.collectAsState\nimport androidx.compose.runtime.getValue\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport com.utsman.composeremote.DynamicLayout\nimport com.utsman.composeremote.router.ComposeRemoteRouter\nimport com.utsman.composeremote.router.KtorHttpLayoutFetcher\nimport com.utsman.composeremote.router.RenderEvent\nimport com.utsman.composeremote.router.ResultRouterFactory\nimport com.utsman.composeremote.router.cached\n\n@Composable\nfun RouterBasicExample() {\n    // Create a coroutine scope\n    val scope = rememberCoroutineScope()\n\n    // Create a layout fetcher with caching\n    val fetcher = remember {\n        val ktorFetcher = KtorHttpLayoutFetcher()\n        ktorFetcher.cached()\n    }\n\n    // Create the router\n    val router = remember {\n        ResultRouterFactory().createRouter(\n            scope = scope,\n            fetcher = fetcher,\n            baseUrl = \"https://your-api.com/layouts\" // Your base URL for layouts\n        )\n    }\n\n    // Implement the router UI\n    ComposeRemoteRouter(\n        initialPath = \"/home\", // First screen to load\n        router = router\n    ) { renderEvent -&gt;\n        when (renderEvent) {\n            is RenderEvent.Loading -&gt; {\n                // Show loading UI\n                LoadingIndicator()\n            }\n            is RenderEvent.Failure -&gt; {\n                // Show error UI\n                ErrorScreen(renderEvent.error)\n            }\n            is RenderEvent.RenderedLayout -&gt; {\n                // Render the layout\n                DynamicLayout(\n                    component = renderEvent.component,\n                    bindValue = renderEvent.bindsValue,\n                    onClickHandler = renderEvent.clickEvent\n                )\n            }\n        }\n    }\n}\n\n// Simple loading indicator composable\n@Composable\nfun LoadingIndicator() {\n    // Your loading UI implementation\n}\n\n// Simple error screen composable\n@Composable\nfun ErrorScreen(error: Throwable) {\n    // Your error UI implementation\n}\n</code></pre>"},{"location":"04-router/09-router-installation-and-basic-usage/#back-button-handling","title":"Back Button Handling","text":"<p>To handle the system back button, add a back handler:</p> <pre><code>val isRoot by router.isRoot.collectAsState()\n\nBackHandler(enabled = !isRoot) {\n    router.popPath()\n}\n</code></pre>"},{"location":"04-router/10-navigation-and-route/","title":"Navigation & Route","text":"<p>The Compose Remote Layout Router uses a URL-based routing system to navigate between different layouts. This guide explains how routes work and the patterns for effective navigation.</p>"},{"location":"04-router/10-navigation-and-route/#url-structure","title":"URL Structure","text":"<p>The router combines a base URL with paths to create the full URL for fetching layouts:</p> <p>Full URL = baseUrl + path</p> <p>Examples:</p> <pre><code>- \"https://api.example.com/layouts\" + \"/home\" = \"https://api.example.com/layouts/home\"\n- \"https://api.example.com/layouts\" + \"/product/123\" = \"https://api.example.com/layouts/product/123\"\n</code></pre> <pre><code>val router = ResultRouterFactory().createRouter(\n    scope = coroutineScope,\n    fetcher = layoutFetcher,\n    baseUrl = \"https://api.example.com/layouts\"\n)\n</code></pre>"},{"location":"04-router/10-navigation-and-route/#navigation-actions","title":"Navigation Actions","text":"<p>The router provides several navigation methods:</p>"},{"location":"04-router/10-navigation-and-route/#push-navigation","title":"Push Navigation","text":"<p>Adds a new screen to the navigation stack:</p> <pre><code>// Navigate to products screen\nrouter.pushPath(\"/products\")\n\n// Navigate to specific product\nrouter.pushPath(\"/product/123\")\n\n// Navigate with query parameters\nrouter.pushPath(\"/search?query=shoes&amp;sort=price\")\n</code></pre>"},{"location":"04-router/10-navigation-and-route/#pop-navigation-back","title":"Pop Navigation (Back)","text":"<p>Returns to the previous screen:</p> <pre><code>// Go back to previous screen\nval success = router.popPath()\n\n// The method returns true if successful, false if at the root\nif (!success) {\n    // At root screen, handle accordingly\n}\n</code></pre>"},{"location":"04-router/10-navigation-and-route/#replace-navigation","title":"Replace Navigation","text":"<p>Replaces the current screen without adding to the stack:</p> <pre><code>// Replace current screen with settings\nrouter.replacePath(\"/settings\")\n</code></pre>"},{"location":"04-router/10-navigation-and-route/#home-navigation","title":"Home Navigation","text":"<p>Clears the history and navigates to a specific path:</p> <pre><code>// Clear history and go to home\nrouter.clearHistory()\nrouter.pushPath(\"/home\")\n</code></pre>"},{"location":"04-router/10-navigation-and-route/#refresh-current-screen","title":"Refresh Current Screen","text":"<p>Reloads the current screen:</p> <pre><code>// Reload current layout\nrouter.reload()\n</code></pre>"},{"location":"04-router/10-navigation-and-route/#navigation-from-json","title":"Navigation from JSON","text":"<p>One of the most powerful features is the ability to define navigation directly in your JSON layouts using special <code>clickId</code> prefixes:</p>"},{"location":"04-router/10-navigation-and-route/#push-navigation_1","title":"Push Navigation","text":"<pre><code>{\n  \"button\": {\n    \"content\": \"Go to Products\",\n    \"clickId\": \"navigate:/products\"\n  }\n}\n</code></pre>"},{"location":"04-router/10-navigation-and-route/#replace-navigation_1","title":"Replace Navigation","text":"<pre><code>{\n  \"button\": {\n    \"content\": \"Go to Settings\",\n    \"clickId\": \"replace:/settings\"\n  }\n}\n</code></pre>"},{"location":"04-router/10-navigation-and-route/#back-navigation","title":"Back Navigation","text":"<pre><code>{\n  \"button\": {\n    \"content\": \"Back\",\n    \"clickId\": \"back\"\n  }\n}\n</code></pre>"},{"location":"04-router/10-navigation-and-route/#home-navigation_1","title":"Home Navigation","text":"<pre><code>{\n  \"button\": {\n    \"content\": \"Home\",\n    \"clickId\": \"home\"\n  }\n}\n</code></pre>"},{"location":"04-router/10-navigation-and-route/#refresh-navigation","title":"Refresh Navigation","text":"<pre><code>{\n  \"button\": {\n    \"content\": \"Refresh\",\n    \"clickId\": \"reload\"\n  }\n}\n</code></pre>"},{"location":"04-router/10-navigation-and-route/#navigation-with-parameters","title":"Navigation with Parameters","text":"<p>You can include parameters in your navigation paths:</p>"},{"location":"04-router/10-navigation-and-route/#path-parameters","title":"Path Parameters","text":"<pre><code>// In Kotlin\nrouter.pushPath(\"/product/123\")\n\n// In JSON\n{\n    \"button\": {\n       \"content\": \"View Product\",\n       \"clickId\": \"navigate:/product/123\"\n   }\n}\n</code></pre>"},{"location":"04-router/10-navigation-and-route/#query-parameters","title":"Query Parameters","text":"<pre><code>// In Kotlin\nrouter.pushPath(\"/search?query=shoes&amp;sort=price\")\n\n// In JSON\n{\n    \"button\": {\n       \"content\": \"Search Shoes\",\n       \"clickId\": \"navigate:/search?query=shoes&amp;sort=price\"\n   }\n}\n</code></pre>"},{"location":"04-router/10-navigation-and-route/#programmatic-navigation-with-navigationeventcontainer","title":"Programmatic Navigation with NavigationEventContainer","text":"<p>For more control, you can use the <code>NavigationEventContainer</code>:</p> <pre><code>// Create the container\nval navigationEventContainer = remember { NavigationEventContainer() }\n\n// Setup the router with the container\nComposeRemoteRouter(\n    initialPath = \"/home\",\n    router = router,\n    navigationEventContainer = navigationEventContainer\n) { renderEvent -&gt;\n    // Render content\n}\n\n// Trigger navigation from anywhere\nButton(onClick = { navigationEventContainer.push(\"/products\") }) {\n    Text(\"Go to Products\")\n}\n\nButton(onClick = { navigationEventContainer.pop() }) {\n    Text(\"Back\")\n}\n\nButton(onClick = { navigationEventContainer.replace(\"/settings\") }) {\n    Text(\"Settings\")\n}\n\nButton(onClick = { navigationEventContainer.home(\"/home\") }) {\n    Text(\"Home\")\n}\n\nButton(onClick = { navigationEventContainer.reload() }) {\n    Text(\"Reload\")\n}\n</code></pre>"},{"location":"04-router/10-navigation-and-route/#handling-navigation-events","title":"Handling Navigation Events","text":"<p>You can listen for navigation events using the <code>onNavigateHandler</code>:</p> <pre><code>ComposeRemoteRouter(\n    initialPath = \"/home\",\n    router = router,\n    onNavigateHandler = { event -&gt;\n        when (event) {\n            is NavigationEvent.Push -&gt; {\n                println(\"Navigated to: ${event.path}\")\n                analytics.logScreenView(event.path)\n            }\n            is NavigationEvent.Pop -&gt; {\n                println(\"Navigated back\")\n                analytics.logBack()\n            }\n            is NavigationEvent.Replace -&gt; {\n                println(\"Replaced with: ${event.path}\")\n                analytics.logScreenView(event.path)\n            }\n            is NavigationEvent.Home -&gt; {\n                println(\"Went home to: ${event.path}\")\n                analytics.logScreenView(event.path)\n            }\n            is NavigationEvent.Reload -&gt; {\n                println(\"Reloaded screen\")\n                analytics.logReload()\n            }\n        }\n    }\n) { renderEvent -&gt;\n    // Render content\n}\n</code></pre>"},{"location":"04-router/10-navigation-and-route/#handling-back-button","title":"Handling Back Button","text":"<p>To properly handle the system back button:</p> <pre><code>// Track if at root of navigation stack\nval isRoot by router.isRoot.collectAsState()\n\n// Handle back button\nBackHandler(enabled = !isRoot) {\n    router.popPath()\n}\n</code></pre>"},{"location":"04-router/10-navigation-and-route/#recommended-route-patterns","title":"Recommended Route Patterns","text":"<p>For consistent navigation, consider these route patterns:</p>"},{"location":"04-router/10-navigation-and-route/#1-sectionid-pattern","title":"1. Section/ID Pattern","text":"<pre><code>/section/[id]\n\nExamples:\n/products\n/product/123\n/categories\n/category/electronics\n</code></pre>"},{"location":"04-router/10-navigation-and-route/#2-action-pattern","title":"2. Action Pattern","text":"<pre><code>/section/[id]/[action]\n\nExamples:\n/product/123/reviews\n/product/123/related\n/user/profile/edit\n</code></pre>"},{"location":"04-router/10-navigation-and-route/#3-query-parameters-for-filters","title":"3. Query Parameters for Filters","text":"<pre><code>/section?[param]=[value]\n\nExamples:\n/products?category=electronics&amp;sort=price\n/search?query=shoes&amp;color=black\n</code></pre>"},{"location":"04-router/10-navigation-and-route/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Use Consistent Patterns    Establish a clear pattern for your routes and stick to it</p> </li> <li> <p>Keep Routes Simple    Avoid overly complex nested routes</p> </li> <li> <p>Handle Edge Cases    Always handle navigation failures gracefully</p> </li> <li> <p>Use Meaningful Names    Choose descriptive route names that reflect the content</p> </li> <li> <p>Track Navigation Analytics    Log navigation events for understanding user flows</p> </li> </ol>"},{"location":"04-router/11-layout-fetcher-and-caching/","title":"Layout Fetcher and Caching","text":"<p>The Compose Remote Layout Router uses the <code>LayoutFetcher</code> interface to retrieve layout JSON from various sources. This component is crucial for performance and offline functionality.</p>"},{"location":"04-router/11-layout-fetcher-and-caching/#layoutfetcher-interface","title":"LayoutFetcher Interface","text":"<p>All layout fetchers implement this interface:</p> <pre><code>interface LayoutFetcher {\n    suspend fun fetchLayout(url: String): Result&lt;String&gt;\n    fun fetchLayoutAsFlow(url: String): Flow&lt;ResultLayout&lt;String&gt;&gt;\n}\n</code></pre> <p>This interface defines two methods:</p> <ul> <li><code>fetchLayout</code>: Simple suspend function that returns a Result</li> <li><code>fetchLayoutAsFlow</code>: Returns a Flow with loading states, useful for UI feedback</li> </ul>"},{"location":"04-router/11-layout-fetcher-and-caching/#built-in-fetchers","title":"Built-in Fetchers","text":""},{"location":"04-router/11-layout-fetcher-and-caching/#ktorhttplayoutfetcher","title":"KtorHttpLayoutFetcher","text":"<p>The primary fetcher uses Ktor HTTP Client to retrieve layouts from remote endpoints:</p> <pre><code>// Create with default settings\nval fetcher = KtorHttpLayoutFetcher()\n\n// Create with custom Ktor client\nval client = HttpClient {\n    install(Logging) {\n        level = LogLevel.HEADERS\n    }\n    install(HttpCache)  // Built-in HTTP caching\n    install(HttpTimeout) {\n        requestTimeoutMillis = 10000  // 10 seconds\n    }\n}\nval customFetcher = KtorHttpLayoutFetcher(client)\n</code></pre> <p>The default implementation includes:</p> <ul> <li>HTTP request logging</li> <li>Basic HTTP caching</li> <li>Standard error handling</li> </ul>"},{"location":"04-router/11-layout-fetcher-and-caching/#cachedktorlayoutfetcher","title":"CachedKtorLayoutFetcher","text":"<p>This wrapper adds in-memory caching capabilities to any <code>LayoutFetcher</code>:</p> <pre><code>// Create with default settings\nval cachedFetcher = ktorFetcher.cached()\n\n// Create with custom settings\nval customCachedFetcher = ktorFetcher.cached(\n    maxCacheSize = 100,                               // Cache up to 100 layouts\n    cacheTtlMillis = 15.minutes.inWholeMilliseconds  // Cache for 15 minutes\n)\n</code></pre>"},{"location":"04-router/11-layout-fetcher-and-caching/#caching-configuration","title":"Caching Configuration","text":""},{"location":"04-router/11-layout-fetcher-and-caching/#cache-size","title":"Cache Size","text":"<p>Control how many layouts are stored in memory:</p> <pre><code>// Small cache for memory-constrained devices\nval smallCache = fetcher.cached(maxCacheSize = 20)\n\n// Large cache for complex apps with many screens\nval largeCache = fetcher.cached(maxCacheSize = 200)\n</code></pre>"},{"location":"04-router/11-layout-fetcher-and-caching/#cache-ttl-time-to-live","title":"Cache TTL (Time-To-Live)","text":"<p>Control how long layouts are considered valid:</p> <pre><code>import kotlin.time.Duration.Companion.minutes\nimport kotlin.time.Duration.Companion.hours\nimport kotlin.time.Duration.Companion.days\n\n// Short TTL for frequently changing content\nval shortTtlCache = fetcher.cached(cacheTtlMillis = 5.minutes.inWholeMilliseconds)\n\n// Medium TTL for normal content\nval mediumTtlCache = fetcher.cached(cacheTtlMillis = 1.hours.inWholeMilliseconds)\n\n// Long TTL for static content\nval longTtlCache = fetcher.cached(cacheTtlMillis = 1.days.inWholeMilliseconds)\n</code></pre>"},{"location":"04-router/11-layout-fetcher-and-caching/#cache-management","title":"Cache Management","text":"<p>The cache can be manually managed:</p> <pre><code>// Clear the entire cache\ncachedFetcher.clearCache()\n\n// Remove a specific URL from cache\ncachedFetcher.invalidateCache(\"https://api.example.com/layouts/home\")\n</code></pre> <p>Use cases for manual cache management:</p> <ul> <li>When a user logs out (clear all)</li> <li>After submitting a form that changes data (invalidate specific URLs)</li> <li>After app updates (clear all)</li> <li>When forcing a refresh (invalidate specific URL)</li> </ul>"},{"location":"04-router/11-layout-fetcher-and-caching/#cache-implementation-details","title":"Cache Implementation Details","text":"<p>The <code>CachedKtorLayoutFetcher</code> provides:</p> <ol> <li>Thread-safe operations using Mutex</li> <li>LRU eviction policy (Least Recently Used)</li> <li>TTL-based expiration (Time To Live)</li> <li>Transparent operation - falls back to network when cache misses</li> </ol> <p>The cache flow works as follows:</p> <ol> <li>Check if URL exists in cache and is not expired</li> <li>If found and valid, return cached layout</li> <li>If not found or expired, fetch from network</li> <li>If network fetch succeeds, store in cache</li> <li>Return the layout</li> </ol>"},{"location":"04-router/11-layout-fetcher-and-caching/#combined-http-and-memory-caching","title":"Combined HTTP and Memory Caching","text":"<p>For optimal performance, use both HTTP caching and memory caching:</p> <pre><code>// Create HTTP client with caching\nval client = HttpClient {\n    install(HttpCache)  // HTTP-level caching\n}\n\n// Create fetcher with HTTP cache\nval httpCachedFetcher = KtorHttpLayoutFetcher(client)\n\n// Add memory caching layer\nval fullyCachedFetcher = httpCachedFetcher.cached()\n</code></pre> <p>This provides multiple caching layers:</p> <ol> <li>HTTP Cache: Handles conditional requests, ETags, etc.</li> <li>Memory Cache: Provides fastest access without network</li> </ol>"},{"location":"04-router/11-layout-fetcher-and-caching/#sample-usage-scenarios","title":"Sample Usage Scenarios","text":""},{"location":"04-router/11-layout-fetcher-and-caching/#basic-network-with-caching","title":"Basic Network with Caching","text":"<pre><code>val router = ResultRouterFactory().createRouter(\n    scope = coroutineScope,\n    fetcher = KtorHttpLayoutFetcher().cached(),\n    baseUrl = \"https://api.example.com/layouts\"\n)\n</code></pre>"},{"location":"04-router/11-layout-fetcher-and-caching/#different-cache-settings-for-different-content","title":"Different Cache Settings for Different Content","text":"<pre><code>// Create different caches for different content types\nval staticFetcher = KtorHttpLayoutFetcher().cached(\n    cacheTtlMillis = 24.hours.inWholeMilliseconds\n)\n\nval dynamicFetcher = KtorHttpLayoutFetcher().cached(\n    cacheTtlMillis = 5.minutes.inWholeMilliseconds\n)\n\n// Select fetcher based on URL\nval compositeFetcher = object : LayoutFetcher {\n    override suspend fun fetchLayout(url: String): Result&lt;String&gt; {\n        return if (url.contains(\"/static/\")) {\n            staticFetcher.fetchLayout(url)\n        } else {\n            dynamicFetcher.fetchLayout(url)\n        }\n    }\n\n    override fun fetchLayoutAsFlow(url: String): Flow&lt;ResultLayout&lt;String&gt;&gt; {\n        return if (url.contains(\"/static/\")) {\n            staticFetcher.fetchLayoutAsFlow(url)\n        } else {\n            dynamicFetcher.fetchLayoutAsFlow(url)\n        }\n    }\n}\n\nval router = ResultRouterFactory().createRouter(\n    scope = coroutineScope,\n    fetcher = compositeFetcher,\n    baseUrl = \"https://api.example.com/layouts\"\n)\n</code></pre>"},{"location":"04-router/11-layout-fetcher-and-caching/#cache-refresh-on-user-action","title":"Cache Refresh on User Action","text":"<pre><code>@Composable\nfun ProductScreen(productId: String, fetcher: CachedKtorLayoutFetcher) {\n    val router = rememberRemoteRouter()\n\n    // Function to refresh product data\n    val refreshProduct = {\n        // Invalidate all related product caches\n        fetcher.invalidateCache(\"https://api.example.com/layouts/product/$productId\")\n        fetcher.invalidateCache(\"https://api.example.com/layouts/product/$productId/reviews\")\n\n        // Reload current screen\n        router.reload()\n    }\n\n    // Pull-to-refresh implementation\n    SwipeRefresh(\n        state = rememberSwipeRefreshState(isRefreshing = false),\n        onRefresh = { refreshProduct() }\n    ) {\n        ComposeRemoteRouter(\n            initialPath = \"/product/$productId\",\n            router = router\n        ) { renderEvent -&gt;\n            // Render content\n        }\n    }\n\n    // Additional refresh button\n    FloatingActionButton(onClick = { refreshProduct() }) {\n        Icon(Icons.Default.Refresh, contentDescription = \"Refresh\")\n    }\n}\n</code></pre>"},{"location":"04-router/11-layout-fetcher-and-caching/#best-practices","title":"Best Practices","text":""},{"location":"04-router/11-layout-fetcher-and-caching/#1-always-use-caching","title":"1. Always Use Caching","text":"<pre><code>// Don't do this in production\nval fetcher = KtorHttpLayoutFetcher()  // No caching\n\n// Do this instead\nval cachedFetcher = KtorHttpLayoutFetcher().cached()\n</code></pre>"},{"location":"04-router/11-layout-fetcher-and-caching/#2-tailor-cache-ttl-to-content-type","title":"2. Tailor Cache TTL to Content Type","text":"<pre><code>// Static content (rarely changes)\nval staticFetcher = KtorHttpLayoutFetcher().cached(\n    cacheTtlMillis = 24.hours.inWholeMilliseconds\n)\n\n// Dynamic content (changes frequently)\nval dynamicFetcher = KtorHttpLayoutFetcher().cached(\n    cacheTtlMillis = 5.minutes.inWholeMilliseconds\n)\n</code></pre>"},{"location":"04-router/11-layout-fetcher-and-caching/#3-handle-network-errors-gracefully","title":"3. Handle Network Errors Gracefully","text":"<pre><code>ComposeRemoteRouter(\n    initialPath = \"/home\",\n    router = router,\n) { renderEvent -&gt;\n    when (renderEvent) {\n        is RenderEvent.Loading -&gt; {\n            LoadingIndicator()\n        }\n        is RenderEvent.Failure -&gt; {\n            if (renderEvent.error is IOException) {\n                // Network error - show offline message with retry button\n                OfflineMessage(\n                    onRetry = { router.reload() }\n                )\n            } else {\n                // Other error\n                ErrorMessage(renderEvent.error.message ?: \"Unknown error\")\n            }\n        }\n        is RenderEvent.RenderedLayout -&gt; {\n            DynamicLayout(\n                component = renderEvent.component,\n                bindValue = renderEvent.bindsValue,\n                onClickHandler = renderEvent.clickEvent\n            )\n        }\n    }\n}\n</code></pre>"},{"location":"04-router/11-layout-fetcher-and-caching/#4-clear-cache-when-appropriate","title":"4. Clear Cache When Appropriate","text":"<pre><code>// When user logs out\nfun logout() {\n    // Clear all user data\n    userPreferences.clear()\n\n    // Clear layout cache to avoid showing personalized content\n    cachedFetcher.clearCache()\n\n    // Navigate to login\n    router.clearHistory()\n    router.pushPath(\"/login\")\n}\n</code></pre>"},{"location":"04-router/11-layout-fetcher-and-caching/#5-monitor-cache-performance","title":"5. Monitor Cache Performance","text":"<pre><code>// Add cache hit/miss monitoring\nvar cacheHits = 0\nvar cacheMisses = 0\n\nval monitoredFetcher = object : LayoutFetcher {\n    override suspend fun fetchLayout(url: String): Result&lt;String&gt; {\n        val startTime = System.currentTimeMillis()\n        val result = cachedFetcher.fetchLayout(url)\n        val duration = System.currentTimeMillis() - startTime\n\n        // Guess if it was a cache hit based on response time\n        if (duration &lt; 50) {\n            cacheHits++\n        } else {\n            cacheMisses++\n        }\n\n        // Log some stats\n        println(\"Cache hit rate: ${cacheHits.toFloat() / (cacheHits + cacheMisses)}\")\n\n        return result\n    }\n\n    override fun fetchLayoutAsFlow(url: String): Flow&lt;ResultLayout&lt;String&gt;&gt; {\n        return cachedFetcher.fetchLayoutAsFlow(url)\n    }\n}\n</code></pre>"},{"location":"04-router/12-live-example/","title":"Live example","text":"<p>This is a simple implementation of a router.</p> <p>TODO: Live example</p> <p>You can explore the code of the live example here This live example layout has the following layout URL: https://crl-marketplace.codeutsman.com/home</p>"}]}